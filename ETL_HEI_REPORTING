create or replace PACKAGE BODY                   ETL_HEI_REPORTING AS
/******************************************************************************
   NAME:       ETL_HEI_REPORTING 
   PURPOSE:    Create HEI Files that need to be submitted to ODHE.

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        10/5/2016   Meena          1. Created this package.
   1.1        03/02/2018  RGK            1. Added PZ_CREATE_HEI_TF
   1.2        03/07/2018  RGK            1. Added PZ_CREATE_HEI_UF
                                         2. Changed the directory for TF file from stu_out to ar_out
   1.3        01/04/2019  rbarrin3       1. Replaced the PZ_CREATE_HEI_AC procedure with a new version     
                                         2. Changed the Institution Assigned Identifier Switch logic for PZ_CREATE_HEI_SE    
   1.4        02/21/2019  rbarrin3       1. Changed the AC procedure to not multiply credit hours by 10      
   1.5        06/20/2019  rbarrin3       1. Added 'GPAPT' as a code for v_course_outcome in PZ_CREATE_HEI_CNSN 
                                         2. Added v_course_grade field to PZ_CREATE_HEI_CNSN
                                         3. Changed tbraccd_detail_code = CPMQ in PZ_CREATE_HEI_CNSN
                                         4. Changed sgrsatt_term_code_eff = p_term to <= for special status field in PZ_CREATE_HEI_CNSN
                                         5. Moved v_delete_switch to the last field on the CNSN output file 
                                         6. Excluded ssbsect_subj_code = 'FOC' records from PZ_CREATE_HEI_ST   
                                         7. Changed header of the AC output file to say TRRAAC   
                                         8. Added 8 fields to PZ_CREATE_HEI_SE 
                                         9. Changed the logic for the SE output file header count 
                                         10. Changed the race logic for PZ_CREATE_HEI_SE  
   1.6        10/29/2019  rbarrin3       1. Added PZ_CREATE_HEI_DC 202140 procedures 
   1.7        12/11/2019  rbarrin3       1. Changed the heirarchy for PZ_CREATE_HEI_AC 
   1.8        01/14/2020  rbarrin3       1. Changed PZ_CREATE_HEI_AC to look for any military schools in SHRTRIT      
   1.9        02/28/2020  skosier        1. Added condition to the PZ_CREATE_HEI_UF procedure to handle Institutional Scholarships with a translation value of O  
   2.0        07/31/2020  rbarrin3       1. Changed PZ_CREATE_HEI_CNSN to get the max(shrgrde_term_code_effective) for the quality points function  
   2.1        10/06/2020  rbarrin3       1. Added a line to PZ_CREATE_HEI_CNSN so that only records for the needed term are sent to the DLA file  
   2.2        11/04/2020  rbarrin3       1. Redesigned the PZ_CREATE_HEI_AC procedure     
   2.3        11/16/2020  rbarrin3       1. Changed PZ_CREATE_HEI_CU to get the max(shrgrde_term_code_effective) for the quality points function   
   2.4        11/19/2020  rbarrin3       1. Academic credit = Y if course outcome = 'GPAPT' in PZ_CREATE_HEI_CU 
   2.5        03/04/2021  rbarrin3       1. Added commit statement to PZ_CREATE_HEI_TF
   2.6        03/12/2021  rbarrin3       1. Added NVL to PZ_CREATE_HEI_TF to use spriden_id if no spbpers_ssn
   2.7        03/16/2021  rbarrin3       1. Change institutional identifier to Y if using spriden_id as spbpers_ssn   
   2.8        12/18/2021  rbarrin3       1. Added 'ON' to the heirarchy query in PZ_CREATE_HEI_AC 
   2.81       03/01/2022  jperry7        1. Added sgrdisa_primary_ind = 'Y' in PZ_CRAETE_HEI_SE 
   2.9        03/13/2022  jperry7        1. Added "Course identifier" column to the output of the AC file due to HEI reporting requirement changes. 
                                         2. Added to cursor "cur_get_output_table" in CREATE_HEI_AC procedure. Added "subj_code to the PARTITION BY function because it was limiting students courses output.
   2.91       03/13/2022  jperry7        1. Added a join to SFRSTCR table in the CREAET_HEI_AC procedure main program to only include students in the AC file that are also in the SE file. 
   2.92       06/08/2022  jperry7        1. Added case statemnt in the SE file to fill NULL values in SPRADDR_STAT_CODE with 'ZZ' and to transform 'FR' to 'ZZ' 
******************************************************************************/

  PROCEDURE ODHE_DropAdd(P_Term VARCHAR2) IS
  BEGIN
      -- Enrollment Files ..

    -- Remove the two views.  The first one has one record for each student taking a course(s)
    --                        The second one has one record for each course, each student was taking
    
    -- Sub-query on start and end dates so only unique PIDM+CRN records are returned ..
    ---   Based on those courses that end by the end of the term, 14-day type ..
    ---    Only works for the courses where the grades have been rolled to Academic History ..
    EXECUTE IMMEDIATE 'create or replace view sis_apps.szv0910
       as select distinct a.sfrstca_pidm as SZV0910_PIDM,
           rpad(f_getspridenid(a.sfrstca_pidm),9,'' '') as SZV0910_BANNER_ID,
           --rpad(f_nscc_format_name(a.sfrstca_pidm, ''LFMI''),32,'' '') as SZV0910_NAME,
           a.sfrstca_crn as SZV0910_CRN,
           e.shrtckg_tckn_seq_no,
           e.shrtckg_seq_no,
           b.ssbsect_subj_code||b.ssbsect_crse_numb||''-''||b.ssbsect_seq_numb as SZV0910_COURSE,
           a.sfrstca_credit_hr as SZV0910_CRD,
           (select min(d.ssrmeet_start_date)
            from ssrmeet d
            where a.sfrstca_crn=d.ssrmeet_crn
            and a.sfrstca_term_code=d.ssrmeet_term_code) as SZV0910_MIN_START_DATE,
           (select max(e.ssrmeet_end_date)
            from ssrmeet e
            where a.sfrstca_crn=e.ssrmeet_crn
            and a.sfrstca_term_code=e.ssrmeet_term_code) as SZV0910_MAX_END_DATE,
           b.ssbsect_census_enrl_date as SZV0910_CENSUS_DATE,
           a.sfrstca_rsts_date as SZV0910_RSTS_DATE,
           a.sfrstca_rsts_code as SZV0910_RSTS_CODE,
           a.sfrstca_gmod_code as SZV0910_GMOD_CODE,
           e.shrtckg_grde_code_final as SZV0910_GRDE_CODE       
    from sfrstca a left outer join sfrstcr
        on a.sfrstca_pidm=sfrstcr_pidm
        and a.sfrstca_crn=sfrstcr_crn
        and a.sfrstca_term_code=sfrstcr_term_code
     left outer join ssrmeet
        on a.sfrstca_crn=ssrmeet_crn
        and a.sfrstca_term_code=ssrmeet_term_code,
    ssbsect b,shrtckn,shrtckg e
    where a.sfrstca_term_code=' || P_Term || '
    and a.sfrstca_crn=b.ssbsect_crn
    and a.sfrstca_term_code=b.ssbsect_term_code
    and a.sfrstca_seq_number =
        (select max(c.sfrstca_seq_number)
         from sfrstca c,ssbsect d
         where c.sfrstca_term_code=d.ssbsect_term_code
         and c.sfrstca_crn=d.ssbsect_crn
         and a.sfrstca_term_code=c.sfrstca_term_code
         and a.sfrstca_crn=c.sfrstca_crn
         and a.sfrstca_pidm=c.sfrstca_pidm)
    and nvl(a.sfrstca_message,''X'') not like ''Record deleted%''
    and nvl(a.sfrstca_error_flag,''x'') <>''F''
    and a.sfrstca_pidm=shrtckn_pidm
    and a.sfrstca_term_code=shrtckn_term_code
    and a.sfrstca_crn=shrtckn_crn
    and shrtckn_pidm=e.shrtckg_pidm
    and shrtckn_term_code=e.shrtckg_term_code
    and shrtckn_seq_no=e.shrtckg_tckn_seq_no
    and e.shrtckg_seq_no=
        (select max(f.shrtckg_seq_no)
         from shrtckg f
         where e.shrtckg_pidm=f.shrtckg_pidm
         and e.shrtckg_term_code=f.shrtckg_term_code
         and e.shrtckg_tckn_seq_no=f.shrtckg_tckn_seq_no) 
    with read only';

                 
    EXECUTE IMMEDIATE 'create or replace view sis_apps.szv0910_pidm
       as select distinct szv0910_pidm as SZV0910_PIDM_PIDM
          from szv0910
    with read only';



  END ODHE_DropAdd;
 
PROCEDURE ODHE_MU_Setup(P_Term VARCHAR2) IS
  BEGIN
      --  Scripts to run each Term ..

    -- Make sure table has no records for the Term ..
    DELETE FROM zrrsecl
    WHERE zrrsecl_term=P_Term;

    -- Insert records for each student into ZRRSECL ..
    INSERT INTO zrrsecl
    SELECT szv0910_pidm_pidm,
           P_Term,
           'UG',
           'SN',
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL
    FROM szv0910_pidm;

    -- Insert 'SN' records for each 'AC' record for a term ..
    INSERT INTO zrrsecl
    SELECT zrrsecl_pidm,
           zrrsecl_term,
           zrrsecl_levl,
           'SN',
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL
    FROM zrrsecl
    WHERE zrrsecl_term=P_Term
    AND zrrsecl_source='AC'; 

    -- Remove the 'SN' records for the Term ..
    DELETE FROM zrrsecl
    WHERE zrrsecl_term=P_Term
    AND zrrsecl_source='SN';

    -- Update 'AC' codes to 'SN' for each record for a term ..
    UPDATE zrrsecl
    SET zrrsecl_source='SN'
    WHERE zrrsecl_source='AC'; 

    -- Insert all course-sections that end by the term end date ..
    ---   (The other course-sections will be reported the next term) ..
    INSERT INTO zrbcnhd
    SELECT DISTINCT ssbsect_term_code,
       ssbsect_crn,
       ssbsect_subj_code||ssbsect_crse_numb,
       ssbsect_seq_numb      
    FROM ssbsect,stvterm,ssrmeet
    WHERE ssbsect_term_code=P_Term
    AND ssbsect_term_code=stvterm_code
    AND ssbsect_crn=ssrmeet_crn
    AND ssbsect_term_code=ssrmeet_term_code
    AND ssrmeet_end_date<=stvterm_end_date
    AND ssbsect_enrl>0;

  END ODHE_MU_Setup;
 
  PROCEDURE PZ_CREATE_HEI_SE(p_term IN VARCHAR2) IS
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_SE.

        TABLES: ZRRSECL - SELECT
                SPRIDEN - SELECT
                SPBPERS - SELECT
                SGBSTDN - SELECT
                SPRADDR - SELECT
                STVTERM - SELECT
                ZRBCNTY - SELECT
                SORHSCH - SELECT
                STVNATN - SELECT
                STVSBGI - SELECT
                GOBINTL - SELECT
==============================================================================*/
-- Set v_debug_pidm with a value for Debugging purposes ..


v_instance                    VARCHAR2(9);
no_param_exception            EXCEPTION;

v_job                       VARCHAR2(20);

v_totrec                    NUMBER;
v_sess                      VARCHAR2(5);
v_year                      VARCHAR2(8);
v_inten                     VARCHAR2(2);

v_zrrsecl_pidm              NUMBER(9);
v_debug_pidm                NUMBER(9);
v_zrrsecl_levl              VARCHAR2(2);

v_spriden_id                VARCHAR2(9); 
v_spbpers_ssn               VARCHAR2(9); 
v_sgbstdn_levl_code            VARCHAR2(3);
v_spbpers_sex               VARCHAR2(1);
v_spbpers_birth_date        VARCHAR2(8);
v_spbpers_ethn_code            VARCHAR2(2);
v_spbpers_confirmed_re_cde  VARCHAR2(1);
v_spbpers_ethn_cde          VARCHAR2(1);
v_ethn_hisp                 VARCHAR2(1);
v_ethn_amind                VARCHAR2(1);
v_ethn_asian                VARCHAR2(1);
v_ethn_black                VARCHAR2(1);
v_ethn_hawaii               VARCHAR2(1);
v_ethn_nonres               VARCHAR2(1);
v_ethn_unkn                 VARCHAR2(1);
v_ethn_white                VARCHAR2(1);
v_race_cde_amind            VARCHAR2(1);
v_race_cde_asian            VARCHAR2(1);
v_race_cde_black            VARCHAR2(1);
v_race_cde_hawaii           VARCHAR2(1);
v_race_cde_white            VARCHAR2(1);
v_race_cde_unkn             VARCHAR2(1);
v_race_cde_alien            VARCHAR2(1);
v_sgbstdn_resd_code         VARCHAR2(1);

v_gobintl_natn_code_legal   VARCHAR2(3);
v_spraddr_atyp_code         VARCHAR2(2);
v_sgbuser_suda_code           VARCHAR2(2);
v_spraddr_cnty_code          VARCHAR2(5);
v_spraddr_zip               VARCHAR2(5);
v_first_enroll                VARCHAR2(1);
v_here_before               VARCHAR2(1);
v_sgbstdn_styp_code         VARCHAR2(1);
v_sgbstdn_degc_code            VARCHAR2(6);
v_sgbstdn_term_code_eff     VARCHAR2(6);
v_obor_code                    VARCHAR2(2);
v_postsecondary                VARCHAR2(1);
v_country_origin            VARCHAR2(2);
v_hs_code                   VARCHAR2(6);
v_hs_year_grad              VARCHAR2(4);
v_hs_grad_date              VARCHAR2(8);
v_term_start_date           VARCHAR2(8);
v_transfers                 VARCHAR2(1);
v_hgh_first                 VARCHAR2(6);
v_und_first                 VARCHAR2(6);
v_prev_coll                 VARCHAR2(1);
v_ssid                      VARCHAR2(9);
v_delete_switch              VARCHAR2(1);
v_which_select              VARCHAR2(1);
v_first_name                  VARCHAR2(60);
v_last_name                  VARCHAR2(60);
v_middle_init                  VARCHAR2(60);     
v_name_suffix                  VARCHAR2(60);
v_undprep_math              VARCHAR2(1);
v_undprep_eng              VARCHAR2(1);
v_armed_forces              VARCHAR2(2);

v_disab_ind              saturn.sgrdisa.sgrdisa_disa_code%TYPE;

ws_first_rec                BOOLEAN := TRUE;

level_code                  VARCHAR2(3); -- Added Taryn 03/12/2003 for First time Enrolled check
next_styp                    VARCHAR2(1); -- Added Taryn 03/12/2003 for First time Enrolled check

utl_file_test               VARCHAR2(100);
utl_file_dir                VARCHAR2(100);             
FILE_HANDLE                 UTL_FILE.FILE_TYPE;
ERROR_HANDLE                UTL_FILE.FILE_TYPE;
ERROR_FOUND                 BOOLEAN;

v_id                         VARCHAR2(9); 
v_ia_id_switch                VARCHAR2(1);
v_first_time_ind            VARCHAR2(1);  
v_temp_id                    VARCHAR2(9); 
v_generate_ic_record        VARCHAR2(1);  
v_ic_timestamp                VARCHAR2(64);    
 

-- ===========================================
-- Declare Nested Table - AGUILARA 12/7/2007
-- ===========================================
TYPE ic_records_tab IS TABLE OF VARCHAR2(60) INDEX BY VARCHAR2(64);
--v_tab_ic_records ic_records_tab;
v_ic_records_index      NUMBER(6) := 10000;
-- ===========================================

CURSOR sefile_rec(v_term VARCHAR2) IS
SELECT a.zrrsecl_pidm, a.zrrsecl_levl
FROM zrrsecl a
WHERE a.zrrsecl_term = v_term
  AND (a.zrrsecl_source = 'SN'
       OR (a.zrrsecl_source = 'AC'
           AND NOT EXISTS (SELECT b.zrrsecl_pidm
                              FROM zrrsecl b
                              WHERE b.zrrsecl_pidm = a.zrrsecl_pidm
                                AND b.zrrsecl_term = v_term
                                AND b.zrrsecl_source = 'SN')))
  ORDER BY A.zrrsecl_pidm                              ;
 
------------------------------------
-- Begin Procedure Declarations   --
------------------------------------


-----------------------------------------------------------------------------
-- Procedure: P_Print_Error                                                --
-- Prints the record with the error message passed in as a parameter       --
-----------------------------------------------------------------------------
PROCEDURE P_PRINT_record(messageIn VARCHAR2, pidmIn NUMBER) IS
    ws_pline        VARCHAR2(250);
    ws_id           VARCHAR2(9);
    ws_name         VARCHAR2(32);
    ws_run          VARCHAR2(20);
    ws_ssn          VARCHAR2(9);


  
BEGIN


  IF ws_first_rec THEN
    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
    INTO ws_run
    FROM dual;
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                    TRRA; Fremont, OHIO');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: ZRRCRSE               Errors found while generating HEI SE File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Banner ID SSN       PIDM     Name                     Message');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------- --------- -------- ------------------------ ---------------------------------------------');
  END IF;

  ws_first_rec := FALSE;

  BEGIN
  
    SELECT spriden_id, RPAD(SUBSTR(spriden_last_name||', '||spriden_first_name||' '||
                 spriden_mi,1,32),32,' '), RPAD(spbpers_ssn,9,'0')
    INTO ws_id, ws_name, ws_ssn
    FROM spriden,spbpers
    WHERE spriden_pidm = pidmIn
      AND spriden_change_ind IS NULL
      AND spriden_pidm = spbpers_pidm;
      
    EXCEPTION
      WHEN OTHERS THEN
        ws_name :='Error reading SPRIDEN for pidm= ' || pidmIn;
        ws_id := '????????';
  END;
     
  ws_pline := ws_id||' '||ws_ssn || ' ' || pidmIn ||'   '|| SUBSTR(ws_name,1,24) || ' ' ||messageIn;
  
  UTL_FILE.PUT_LINE(ERROR_HANDLE,ws_pline);

END P_PRINT_record;

-----------------------------------------------------------------------------
-- Procedure: P_Print_IC_report                                            --
-- Prints the IC Records Report                                            --
-----------------------------------------------------------------------------
--PROCEDURE P_PRINT_IC_report(p_record_number NUMBER, p_spbpers_ssn VARCHAR2, p_id VARCHAR2) IS
--    ws_run          VARCHAR2(20);
--BEGIN
--
--  IF ws_first_line_ic_report THEN
--    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
--    INTO ws_run
--    FROM dual;
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'Run: ' || ws_run || '                       NSCC; Fremont, OHIO');    
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'Program: ZRRCRSE                                                              Term:' || p_term);
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'Report: Identifier Change (IC) records created while generating HEI SE File');
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE, ' ');
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'      Record #      Old ID      New Id');
--    UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'      ---------   ---------   ---------');
--  END IF;
--
--  ws_first_line_ic_report := FALSE;
--
--  UTL_FILE.PUT_LINE(IC_REPT_HANDLE, '      ' || LPAD((p_record_number - 10000),6,0) || '      ' || p_spbpers_ssn || '   ' || p_id);
--
--
--END P_PRINT_IC_report;

-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- **************************** Main Program ***************************** --
-----------------------------------------------------------------------------

BEGIN
 --  Scripts to run each Term ..
 
  --Drop and Create View for the Term..
  
   ODHE_DropAdd(P_Term);

    -- Make sure table has no records for the Term ..
    DELETE FROM zrrsecl
    WHERE zrrsecl_term=P_Term;

    -- Insert records for each student into ZRRSECL ..
    INSERT INTO zrrsecl
    SELECT szv0910_pidm_pidm,
           P_Term,
           'UG',
           'SN',
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL
    FROM szv0910_pidm;

-- Set a value in the v_debug_pidm variable for debugging ..
   -- v_debug_pidm := 90521;

DBMS_OUTPUT.PUT_LINE('**Begin Procedure SE**');   
DBMS_OUTPUT.ENABLE(1000000);

    EXECUTE IMMEDIATE ' 
    truncate table sis_apps.undprep_eng_scores';
    
    INSERT INTO sis_apps.undprep_eng_scores (pidm)
      SELECT DISTINCT(sortest_pidm) 
        FROM sortest
       WHERE sortest_tesc_code IN ('PARC','PASK','PAWP','A01','A03','NGARC');

    COMMIT;

    UPDATE sis_apps.undprep_eng_scores
       SET parc =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'PARC'),
           pask =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'PASK'),
           pawp =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'PAWP'),
           a01 =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'A01'),
           a03 =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'A03'),
           ngarc =
               (SELECT MAX (TO_NUMBER (sortest_test_score))
                  FROM sortest
                 WHERE     sortest_pidm = sis_apps.undprep_eng_scores.pidm
                       AND sortest_tesc_code = 'NGARC')
     WHERE EXISTS
               (SELECT pidm
                  FROM sis_apps.undprep_eng_scores a
                       LEFT OUTER JOIN sortest b ON (a.pidm = b.sortest_pidm));

    COMMIT;

  -- ----------------------------------------------- --
  -- Initialize IC Files' names AGUILARA 12/07/2007  --
  -- ----------------------------------------------- --
  v_IC_timestamp := 'xxxxxxxx';
  SELECT TO_CHAR(SYSDATE,'YYYYMMDD')
  INTO v_IC_timestamp
  FROM dual;
  --v_IC_filename := 'IC_filedata_' || v_IC_timestamp || '.dat';
  --v_IC_lis_filename := 'IC_filedata_' || v_IC_timestamp || '.lis';
    
-----------------------------------------------------------------------------
  utl_file_dir      := 'STU_OUT';
  FILE_HANDLE    := UTL_FILE.FOPEN(utl_file_dir,'SE_filedata.dat','w');
  ERROR_HANDLE   := UTL_FILE.FOPEN(utl_file_dir,'zrrcrse_errors.lis','w'); 
  --IC_REPT_HANDLE := UTL_FILE.FOPEN(utl_file_dir, v_IC_lis_filename,'w'); 
-----------------------------------------------------------------------------

  

  SELECT TO_CHAR(stvterm_start_date, 'YYYYMMDD')
    INTO v_term_start_date
  FROM stvterm
  WHERE stvterm_code = p_term;
  
  
  
  OPEN sefile_rec(p_term);
  
  v_ic_records_index := 10000;
  
  EXECUTE IMMEDIATE ' 
   truncate table sis_apps.hei_se_output';
  
  LOOP
  
    FETCH sefile_rec 
    INTO v_zrrsecl_pidm, v_zrrsecl_levl;
    
   -- DBMS_OUTPUT.PUT_LINE('DEBUGGING: '||v_zrrsecl_pidm);
           
    EXIT WHEN sefile_rec%NOTFOUND;
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 01: '||v_zrrsecl_pidm);
    END IF;
    
    BEGIN

    v_race_cde_amind  := 'N';
    v_race_cde_asian  := 'N'; 
    v_race_cde_black  := 'N'; 
    v_race_cde_hawaii := 'N'; 
    v_race_cde_white  := 'N'; 
    v_race_cde_unkn   := 'N'; 
    v_race_cde_alien  := 'N';       
    
    v_which_select := '1';
       
    WITH undprep_math AS (       
                          SELECT sortest_pidm, 'N' AS um_flag  FROM sortest WHERE (sortest_tesc_code = 'PAMC' AND TO_NUMBER(sortest_test_score) > 54)
                          UNION 
                          SELECT sortest_pidm, 'N' AS um_flag  FROM sortest WHERE (sortest_tesc_code = 'A02' AND TO_NUMBER(sortest_test_score) > 21)
                          UNION 
                          SELECT sortest_pidm, 'N' AS um_flag  FROM sortest WHERE (sortest_tesc_code = 'NGAME' AND TO_NUMBER(sortest_test_score) > 240)
                          UNION 
                          SELECT spriden_pidm, 'N' FROM spriden WHERE spriden_pidm NOT IN (SELECT sortest_pidm FROM sortest WHERE sortest_tesc_code IN ('PAMA','PAMC','A02','NGAME')) AND spriden_change_ind IS NULL
                         ),
         undprep_english AS (
                             SELECT pidm, CASE 
                                            WHEN ( -- students who did not take any remedial tests should be considered prepared
                                                  parc IS NULL AND 
                                                  pask IS NULL AND 
                                                  pawp IS NULL AND 
                                                  a01 IS NULL AND 
                                                  a03 IS NULL AND 
                                                  ngarc IS NULL
                                                 ) 
                                            THEN 'N'
                                            WHEN ( 
                                                   (
                                                     (NVL(parc, 0) < 71)
                                                     AND
                                                     (NVL(pask, 0) < 91)
                                                     AND
                                                     (NVL(pawp, 0) < 6)
                                                     AND
                                                     (
                                                       (
                                                         (NVL(a03, 0) < 16) 
                                                         AND
                                                         (NVL(a01, 0) < 21) 
                                                         AND
                                                         (NVL(ngarc, 0) < 253)
                                                       )
                                                       OR 
                                                       (
                                                         (NVL(a03, 0) > 15) 
                                                         AND
                                                         (NVL(a01, 0) < 16)  
                                                         AND
                                                         (NVL(ngarc, 0) < 253)
                                                       )   
                                                     )
                                                   )
                                                   OR
                                                   (
                                                     (NVL(parc, 0) > 70)
                                                     AND
                                                     (NVL(pask, 0) < 85)
                                                     AND
                                                     (NVL(pawp, 0) < 5)
                                                     AND
                                                     (
                                                        (
                                                         (NVL(a03, 0) < 16) 
                                                         AND
                                                         (NVL(a01, 0) < 21) 
                                                         AND
                                                         (NVL(ngarc, 0) < 253)
                                                       )
                                                       OR 
                                                       (
                                                         (NVL(a03, 0) > 15) 
                                                         AND
                                                         (NVL(a01, 0) < 16)  
                                                         AND
                                                         (NVL(ngarc, 0) < 253)
                                                        )   
                                                     )
                                                   )  
                                                 )
                                            THEN 'Y'
                                            ELSE 'N'
                                         END AS ue_flag
                             FROM sis_apps.undprep_eng_scores
                            ),                       
         armed_forces AS (
                          SELECT DISTINCT (spriden.spriden_id),
                                 spbpers.spbpers_ssn,
                                 sfrstcr.sfrstcr_term_code,
                                 spbpers.spbpers_vera_ind,
                                 'Y' AS af_flag
                          FROM spbpers
                               JOIN spriden ON (spriden.spriden_pidm = spbpers.spbpers_pidm AND spriden.spriden_change_ind IS NULL)
                               JOIN sfrstcr ON (sfrstcr.sfrstcr_pidm = spriden.spriden_pidm)
                          WHERE sfrstcr.sfrstcr_term_code = p_term
                            AND sfrstcr.sfrstcr_rsts_code LIKE 'R%'
                          ORDER BY spriden.spriden_id
                         ),
         disability AS ( -- disabilities can change from term to term, this ensures the disability code for the term being used is in this file
                        SELECT sgrdisa_pidm, sgrdisa_disa_code, sgrdisa_term_code 
                            FROM sgrdisa 
                                WHERE sgrdisa_term_code = p_term
                                AND sgrdisa_primary_ind = 'Y' 
                                   
                           
                       )                
    SELECT s.spriden_id, 
           NVL(a.spbpers_ssn,s.spriden_id) AS spbpers_ssn, 
           RPAD(NVL(s.spriden_first_name,' '),20,' ') AS spriden_first_name, 
           RPAD(NVL(s.spriden_last_name,' '),20,' ') AS spriden_last_name, 
           RPAD(NVL(REPLACE(s.spriden_mi,'.',''),' '),1,' ') AS spriden_mi, 
           RPAD(NVL(REPLACE(s.spriden_surname_prefix,'.',''),' '),5,' ') AS spriden_surname_prefix,
           DECODE(v_zrrsecl_levl,'GR','GRD','NG','NDG','UND') AS sgbstdn_levl_code, 
           NVL(a.spbpers_sex,'N') AS spbpers_sex,
           NVL(TO_CHAR(a.spbpers_birth_date,'MMDDYYYY'),'UKUKUNKN')AS spbpers_birth_date, 
           DECODE(gokintl.f_check_nonresident_status(a.spbpers_pidm, stvterm_start_date),'Y','NR',  
             NVL(a.spbpers_ethn_code,'U')) AS spbpers_ethn_code,                                                                                      
           -- DECODE(NVL(d.spraddr_stat_code,'ZZ'),'AE','ZZ','AP','AE','FR','ZZ',d.spraddr_stat_code) AS state_code,    -- Modified jacksokn 06/17/04 to change AP to AE
            CASE
            WHEN d.spraddr_stat_code is NULL THEN 'ZZ'
            WHEN d.spraddr_stat_code = 'AE' THEN 'ZZ'
            WHEN d.spraddr_stat_code = 'AP' THEN 'AE'
            WHEN d.spraddr_stat_code = 'FR' THEN 'ZZ'
            ELSE d.spraddr_stat_code
           END as state_code,
           DECODE(NVL(d.spraddr_stat_code,'ZZ'),'OH', d.spraddr_cnty_code,'XX') county_code,
           DECODE(NVL(d.spraddr_stat_code,'ZZ'),'OH', NVL(SUBSTR(d.spraddr_zip,1,5),'XXXXX'),'XXXXX') AS zipcode,
           DECODE(b.sgbstdn_levl_code,        -- Modified by Taryn to add term check for A and B
                    'GR','N',
                    'UG',DECODE(b.sgbstdn_styp_code,
                                  'N','Y',
                                  'H','Y',
                                  'S','Y',
                                  'C','N',
                                  'G','N',
                                  'R','N',
                                  'T','N',
                                  'Z','N',
                                  'A', DECODE(b.sgbstdn_term_code_eff,p_term,'Y','N'),
                                  'B', DECODE(b.sgbstdn_term_code_eff,p_term,'Y','N'), 'N'), 'N') AS first_enroll,
           b.sgbstdn_styp_code,
           b.sgbstdn_degc_code_1,
           b.sgbstdn_term_code_eff,
           b.sgbstdn_levl_code,                                  
           CASE
            WHEN b.sgbstdn_resd_code = 'I' THEN gobintl_natn_code_issue
            ELSE '98'
           END AS resd_code,
           gobintl_natn_code_legal,
           d.spraddr_atyp_code,
           a.spbpers_confirmed_re_cde,   
          CASE 
            WHEN um.um_flag = 'N' THEN 'N'
            ELSE 'Y'
          END AS undprep_math_ind,
          NVL(ue.ue_flag,'N') AS undprep_eng_ind,
           CASE       
               WHEN af.spbpers_vera_ind = 'V' THEN '03'
               WHEN af.spbpers_vera_ind = 'B' THEN '05'
               WHEN af.spbpers_vera_ind = 'O' THEN '05'  
               WHEN af.spbpers_vera_ind IS NULL THEN '04'               
               ELSE '04'                      
           END AS arm_for_ind,
           NVL2(dis.sgrdisa_disa_code,'Y','N') AS sgrdisa_disa_code,
           NVL(a.spbpers_ethn_cde,'U') AS spbpers_ethn_cde,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND gorprac_race_cde='I') AS race_cde_amind,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND gorprac_race_cde='O') AS race_cde_asian,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND gorprac_race_cde='B') AS race_cde_black,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND gorprac_race_cde='P') AS race_cde_hawaii,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND gorprac_race_cde='C') AS race_cde_white,
           (SELECT 'X'
            FROM gorprac
            WHERE spriden_pidm=gorprac_pidm
            AND NVL(gorprac_race_cde,'U') = 'U') AS race_cde_unkn,
            DECODE(gokintl.f_check_nonresident_status(spbpers_pidm, stvterm_start_date),'Y','X') AS race_cde_alien,
           CASE
             WHEN smrprle_degc_code='CER' 
               THEN '05'
             WHEN b.sgbstdn_program_1 IN ('ASAATRSF','TRANSFER_MOD')
               THEN '06'
             WHEN SUBSTR(smrprle_degc_code,1,1)='A'
               THEN '07'
             ELSE '03'
           END AS inten,
           RPAD(NVL((SELECT s2.Spriden_ID FROM spriden s2 WHERE s2.spriden_pidm=s.spriden_pidm AND s2.spriden_ntyp_code = 'SSID'),' '),9,' ') AS ssid
    INTO v_spriden_id, v_spbpers_ssn, v_first_name, v_last_name, v_middle_init, v_name_suffix, v_sgbstdn_levl_code, v_spbpers_sex, 
           v_spbpers_birth_date, v_spbpers_ethn_code, 
           v_sgbuser_suda_code, v_spraddr_cnty_code,
           v_spraddr_zip, v_first_enroll, v_sgbstdn_styp_code, 
           v_sgbstdn_degc_code,         
           v_sgbstdn_term_code_eff, level_code,            
           v_country_origin,
           v_gobintl_natn_code_legal,
           v_spraddr_atyp_code,
           v_spbpers_confirmed_re_cde,
           v_undprep_math,
           v_undprep_eng,
           v_armed_forces,
           v_disab_ind,
           v_spbpers_ethn_cde,
           v_race_cde_amind,
           v_race_cde_asian,
           v_race_cde_black,
           v_race_cde_hawaii,
           v_race_cde_white,
           v_race_cde_unkn,
           v_race_cde_alien,
           v_inten,
           v_ssid
    FROM spriden s 
         LEFT OUTER JOIN gobintl ON (s.spriden_pidm = gobintl_pidm)
         LEFT OUTER JOIN goradid ON (s.spriden_pidm = goradid_pidm AND goradid_adid_code = 'SSID')
         LEFT OUTER JOIN disability dis ON (s.spriden_pidm = dis.sgrdisa_pidm)
         LEFT OUTER JOIN armed_forces af ON (s.spriden_id = af.spriden_id)
         LEFT OUTER JOIN undprep_math um ON (s.spriden_pidm = um.sortest_pidm) 
         LEFT OUTER JOIN undprep_english ue ON (s.spriden_pidm = ue.pidm)   
         JOIN spbpers a ON (a.spbpers_pidm = v_zrrsecl_pidm)
         JOIN sgbstdn b ON (b.sgbstdn_pidm = a.spbpers_pidm) 
         JOIN spraddr d ON (d.spraddr_pidm = a.spbpers_pidm)
         JOIN smrprle ON (b.sgbstdn_program_1 = smrprle_program),         
         stvterm  
    WHERE s.spriden_pidm = v_zrrsecl_pidm
      AND s.spriden_change_ind IS NULL
      AND a.SPBPERS_DEAD_IND IS NULL
   
     
   
      AND b.sgbstdn_term_code_eff = (SELECT MAX(e.sgbstdn_term_code_eff)   
                                             FROM sgbstdn e                
                                             WHERE e.sgbstdn_pidm = a.spbpers_pidm        
                                               AND e.sgbstdn_levl_code = 'UG')       
      AND stvterm_code = p_term    -- Added to grab ethnicities for the specified term
    
      AND d.spraddr_seqno = (SELECT NVL(MAX(e.spraddr_seqno),9)
                             FROM spraddr e
                             WHERE e.spraddr_pidm = a.spbpers_pidm
                              AND e.spraddr_atyp_code = 'PR'
                              AND e.spraddr_status_ind IS NULL)
      AND d.spraddr_atyp_code = (
                                  SELECT DECODE(
                                               MIN(
                                                   DECODE(
                                                          f.spraddr_atyp_code,'PR','1','BI','2','OF','3','LO','4','5'
                                                         )
                                                  ),'1','PR','2','BI','3','OF','4','LO','5','XX'
                                              )
                                 FROM spraddr f
                                 WHERE f.spraddr_pidm = d.spraddr_pidm
                                    AND  f.spraddr_seqno = d.spraddr_seqno
                                 )
;
                                    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 02: '||v_zrrsecl_pidm);
    END IF;
                                    
      ---------------------------------------------------------------------------------------
      -- Determine new Ethnicity Codes  08/24/2009                                         --
      ---------------------------------------------------------------------------------------
      
    v_ethn_hisp   := 'N';  
    v_ethn_amind  := 'N';
    v_ethn_asian  := 'N';
    v_ethn_black  := 'N';
    v_ethn_hawaii := 'N';
    v_ethn_white  := 'N';
    v_ethn_unkn   := 'N';
    v_ethn_nonres := 'N';
    
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 03: '||v_zrrsecl_pidm);
    END IF;
    
      ---------------------------------------------------------------------------------------
      -- Determine new Ethnicity and Race Codes  for Summer 2010                           --
      ---------------------------------------------------------------------------------------
            IF v_spbpers_ethn_cde = '2' THEN            --- Hispanic / Latino
                v_ethn_hisp := 'Y';
            END IF;
            IF v_race_cde_amind = 'X' THEN
                v_ethn_amind := 'Y';
            END IF;
            IF v_race_cde_asian = 'X' THEN
                v_ethn_asian := 'Y';
            END IF;
            IF v_race_cde_black = 'X' THEN
                v_ethn_black := 'Y';
            END IF;
            IF v_race_cde_hawaii = 'X' THEN
                v_ethn_hawaii := 'Y';
            END IF;
            IF v_race_cde_white = 'X' THEN
                v_ethn_white := 'Y';
            END IF;
            IF v_race_cde_unkn = 'X' THEN
                v_ethn_unkn := 'Y';
            END IF;
            IF v_race_cde_alien = 'X' THEN
                v_ethn_nonres := 'Y';
            END IF;
    
    IF v_ethn_hisp ||  
       v_ethn_amind ||
       v_ethn_asian ||
       v_ethn_black ||
       v_ethn_hawaii ||
       v_ethn_white ||
       v_ethn_unkn  ||
       v_ethn_nonres = 'NNNNNNNN' THEN
        v_ethn_unkn := 'Y';
    END IF;

    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 04: '||v_zrrsecl_pidm);
    END IF;

      ---------------------------------------------------------------------------------------
      -- Determine Country of Origin  08/24/2009                                           --
      ---------------------------------------------------------------------------------------

    v_which_select := '2';    

    --v_country_origin := '98';
    
    IF v_sgbstdn_resd_code = 'F' THEN
        SELECT stvnatn_sevis_equiv
        INTO v_country_origin
        FROM stvnatn
        WHERE v_gobintl_natn_code_legal=stvnatn_code;
    END IF;
    
      ---------------------------------------------------------------------------------------
      -- Determine ACT High School Code and Year Graduated  08/24/2009                     --
      ---------------------------------------------------------------------------------------
    
    v_hs_code := NULL;
    v_hs_year_grad := NULL;
      
            
        SELECT 
         CASE 
            WHEN sorhsch_sbgi_code = '999990' THEN 'XXXXXX'
                ELSE sorhsch_sbgi_code
            END AS hs_code,
               grad_year,
               grad_date
        INTO v_hs_code,
             v_hs_year_grad,
             v_hs_grad_date
        FROM dual LEFT OUTER JOIN
         (SELECT sorhsch_pidm,
                 NVL(sorhsch_sbgi_code,'XXXXXX') AS sorhsch_sbgi_code,
                 NVL(TO_CHAR(a.sorhsch_graduation_date, 'YYYY'),'UNKN') AS grad_year,
                 TO_CHAR(a.sorhsch_graduation_date, 'YYYYMMDD') AS grad_date
          FROM sorhsch a, stvsbgi
          WHERE a.sorhsch_sbgi_code = stvsbgi_code
            AND a.sorhsch_graduation_date =
              (SELECT MAX(b.sorhsch_graduation_date)
               FROM sorhsch b
               WHERE a.sorhsch_pidm = b.sorhsch_pidm)
            )
        ON v_zrrsecl_pidm = sorhsch_pidm;
            

    IF v_hs_code IS NULL THEN
        v_hs_code := 'XXXXXX';
    END IF; 
      
    IF v_hs_code = '999999' OR  v_hs_code = '999997' OR v_hs_code = '999998' OR v_hs_code = 'F99999' THEN
        v_hs_code := 'XXXXXX';
    END IF; 
    
    IF LENGTH(v_hs_code) = 5 THEN
        v_hs_code := '0'||v_hs_code;
    END IF;
    
    IF v_hs_year_grad IS NULL THEN
        v_hs_year_grad := 'UNKN';
        v_hs_grad_date := '19000601';
    END IF; 
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 05: '||v_zrrsecl_pidm);
    END IF;
    
      ---------------------------------------------------------------------------------------
      -- Changes to logic of first time enrolled for styp code of E --
      ---------------------------------------------------------------------------------------
      
    v_which_select := '3';      
      
    IF level_code = 'UG' AND v_sgbstdn_styp_code = 'E' THEN
            SELECT a.sgbstdn_styp_code
            INTO next_styp
            FROM sgbstdn a
            WHERE a.sgbstdn_pidm = v_zrrsecl_pidm
              AND a.sgbstdn_term_code_eff = (SELECT MAX(b.sgbstdn_term_code_eff)
                                                     FROM sgbstdn b
                                                     WHERE b.sgbstdn_pidm = a.sgbstdn_pidm
                                                       AND b.sgbstdn_term_code_eff <= p_term);

          IF next_styp = 'N' THEN
              v_first_enroll := 'Y';
          ELSE
              v_first_enroll := 'N';
          END IF;                              
    END IF;                  
    -- End Taryn Change -----------------------------------------------------------------------
    
    IF v_spbpers_birth_date != 'UKUKUNKN'
         AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(v_spbpers_birth_date,5,4) > 100 
              OR TO_CHAR(SYSDATE,'YYYY') - SUBSTR(v_spbpers_birth_date,5,4) < 10) THEN
          v_spbpers_birth_date := 'UKUKUNKN';
        p_print_record('WARNING: Birth Date is Unknown', v_zrrsecl_pidm);     
    ELSIF v_spbpers_birth_date = 'UKUKUNKN' THEN
        p_print_record('WARNING: Birth Date is Unknown', v_zrrsecl_pidm);
    END IF;
      
    IF v_spbpers_sex = 'N' THEN
        p_print_record('WARNING: Gender is Unknown (N)',v_zrrsecl_pidm);
    END IF;
      
    ERROR_FOUND := FALSE;
      
    EXCEPTION 
      WHEN TOO_MANY_ROWS THEN
        ERROR_FOUND := TRUE;
        p_print_record(SQLERRM(SQLCODE)||' Sel: '||v_which_select||' PIDM: '||v_zrrsecl_pidm||' Lev: '||v_zrrsecl_levl,v_zrrsecl_pidm);
      WHEN OTHERS THEN
        ERROR_FOUND := TRUE;
        p_print_record(SQLERRM(SQLCODE)||' Sel: '||v_which_select||' PIDM: '||v_zrrsecl_pidm||' Lev: '||v_zrrsecl_levl,v_zrrsecl_pidm);
   
    END;    
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 06: '||v_zrrsecl_pidm);
    END IF;

    ---------------------------------------------------------------------------------------
    -- If Student is UND, check for High School graduation                       --
    ---------------------------------------------------------------------------------------
      v_postsecondary := NULL;    
    
    IF (v_sgbstdn_levl_code = 'UND') THEN
--    DBMS_OUTPUT.PUT_LINE('Before PIDM '||v_zrrsecl_pidm||' '||v_sgbstdn_levl_code);
      BEGIN
         
      SELECT 'E'
      INTO v_postsecondary
      FROM sorhsch,stvterm
      WHERE sorhsch_pidm =v_zrrsecl_pidm
      AND stvterm_code = p_term
      AND sorhsch_graduation_date > stvterm_end_date;
          
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
          v_sgbstdn_levl_code := 'UND';       
      
      WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('High School Graduation checking error. PIDM: '||v_zrrsecl_pidm);
      
      END; 
      
      IF NVL(v_postsecondary,'x') = 'E' THEN
                   v_sgbstdn_levl_code := 'HGH'; 
      END IF;
    END IF;
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 07: '||v_zrrsecl_pidm);
    END IF;
    
--    DBMS_OUTPUT.PUT_LINE('After PIDM '||v_zrrsecl_pidm||' '||v_sgbstdn_levl_code);
    ---------------------------------------------------------------------------------------
   
    ---------------------------------------------------------------------------------------
    --    Cleanup Process Start                                                            --
    ---------------------------------------------------------------------------------------
    
--    IF v_zrrsecl_pidm IN (148793,149148,152176) THEN
--        DBMS_OUTPUT.PUT_LINE('PIDM: '||v_zrrsecl_pidm||'  ST: '||v_sgbuser_suda_code||
--                                '  Cnty: '||v_spraddr_cnty_code);
--    END IF;
    
    IF v_sgbuser_suda_code='OH' AND SUBSTR(NVL(v_spraddr_cnty_code,'XX'),1,2) <> 'OH' THEN
    
      BEGIN
      
        SELECT spraddr_cnty_code, SUBSTR(spraddr_zip,1,5)
        INTO v_spraddr_cnty_code, v_spraddr_zip
        FROM spraddr 
        WHERE spraddr_pidm = v_zrrsecl_pidm
          AND spraddr_stat_code = 'OH'
          AND spraddr_cnty_code IS NOT NULL
          AND SUBSTR(NVL(spraddr_cnty_code,'XX'),1,2) = 'OH'
          AND ROWNUM=1;
   
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        v_spraddr_cnty_code := 'XX';
        p_print_record(SQLERRM(SQLCODE)||' Cty/Zip PIDM: '||v_zrrsecl_pidm, v_zrrsecl_pidm);
      
      END;
      
    ELSIF v_sgbuser_suda_code <> 'OH' AND NVL(v_spraddr_cnty_code,'XX') <> 'XX' THEN
    
      v_spraddr_cnty_code := 'XX';
    
    END IF;
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 08: '||v_zrrsecl_pidm);
    END IF;
    
            
      BEGIN

-- The routine below does not work if there is more than one H.S. record for a ..
-- student and one graduation date is blank ..
    SELECT NVL((SELECT a.shrttrm_term_code
                FROM shrttrm a
                WHERE a.shrttrm_pidm=v_zrrsecl_pidm
                AND a.shrttrm_term_code =
                    (SELECT MIN(b.shrttrm_term_code)
                     FROM shrttrm b LEFT OUTER JOIN sorhsch c
                        ON b.shrttrm_pidm=c.sorhsch_pidm
                     WHERE b.shrttrm_pidm=a.shrttrm_pidm
                     AND c.sorhsch_graduation_date =
                        (SELECT MAX(d.sorhsch_graduation_date)
                         FROM sorhsch d
                         WHERE c.sorhsch_pidm=d.sorhsch_pidm)                
                     AND (SELECT stvterm_end_date FROM stvterm WHERE stvterm_code=b.shrttrm_term_code)<= c.sorhsch_graduation_date)),000000),
           NVL((SELECT a.shrttrm_term_code
                FROM shrttrm a
                WHERE a.shrttrm_pidm=v_zrrsecl_pidm
                AND a.shrttrm_term_code =
                    (SELECT MIN(b.shrttrm_term_code)
                     FROM shrttrm b LEFT OUTER JOIN sorhsch c
                        ON b.shrttrm_pidm=c.sorhsch_pidm
                     WHERE b.shrttrm_pidm=a.shrttrm_pidm
                     AND c.sorhsch_graduation_date =
                        (SELECT MAX(d.sorhsch_graduation_date)
                         FROM sorhsch d
                         WHERE c.sorhsch_pidm=d.sorhsch_pidm)
                     AND (SELECT stvterm_end_date FROM stvterm WHERE stvterm_code=b.shrttrm_term_code) > c.sorhsch_graduation_date)),000000),
           (SELECT DISTINCT 'X'
            FROM shrtrit
            WHERE v_zrrsecl_pidm=shrtrit_pidm)  
    INTO v_hgh_first,
         v_und_first,
         v_prev_coll  
    FROM dual;
    
    IF v_hgh_first = 0 AND
       v_und_first = 0 THEN
           SELECT a.shrttrm_term_code
           INTO v_und_first
           FROM shrttrm a
           WHERE a.shrttrm_pidm=v_zrrsecl_pidm
           AND a.shrttrm_term_code =
            (SELECT MIN(b.shrttrm_term_code)
             FROM shrttrm b
             WHERE a.shrttrm_pidm=b.shrttrm_pidm);
    END IF;    
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 09: '||v_zrrsecl_pidm||'   '||p_term);
    END IF;   
    
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
        v_und_first := p_term;
      
      END;      
        
    IF v_sgbstdn_levl_code='HGH' THEN
        v_sgbstdn_term_code_eff := v_hgh_first;
    ELSE
        v_sgbstdn_term_code_eff := v_und_first;
    END IF;
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 09a: SGBSTDN Term: '||v_sgbstdn_term_code_eff);
    END IF; 
    
    v_sess := SUBSTR(v_sgbstdn_term_code_eff, LENGTH(v_sgbstdn_term_code_eff) - 1,2);
    
    IF v_sess = '0' THEN
        v_sgbstdn_term_code_eff := p_term;
        v_sess := SUBSTR(v_sgbstdn_term_code_eff,5,2);
    END IF;
       
    v_year := SUBSTR(v_sgbstdn_term_code_eff,1, LENGTH(v_sgbstdn_term_code_eff) - 2);
    
    IF v_sess = '10' THEN
        v_sess := 'SP';
    END IF;
   
    IF v_sess = '30' THEN
        v_sess := 'SM';
    ELSIF v_sess = '40' THEN
        v_sess := 'AU';
    END IF;
  
    
           IF v_zrrsecl_pidm = v_debug_pidm THEN
              DBMS_OUTPUT.PUT_LINE('PIDM: '||v_zrrsecl_pidm||
                                      ' HGH: '||v_hgh_first||
                                      ' UND: '||v_und_first||
                                      ' Level: '||v_sgbstdn_levl_code||
                                      ' Session: '||v_sess||
                                      ' Year: '||v_year);
           END IF;
    

    IF v_spraddr_cnty_code !='XX' THEN
      
      BEGIN
      
      SELECT zrbcnty_obor_code
      INTO v_obor_code
      FROM zrbcnty
      WHERE zrbcnty_bann_code = v_spraddr_cnty_code;
      
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          p_print_record('No obor_code in cntycode for bann_code'
                          ||' v_zrrsecl_pidm= '||v_zrrsecl_pidm||'  '||v_spraddr_cnty_code, v_zrrsecl_pidm);
           v_obor_code := 'XX';
      END;
      
    ELSE
      v_obor_code := 'XX';
    END IF;
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 10: '||v_zrrsecl_pidm);
    END IF;
    
    
    v_id := v_spbpers_ssn;

   
        -- ------------------------------------------- --
        -- Override all previous Student Level Codes   --
        --    and First Time Enrollment Codes logic    --
        --    and replace it with the scripts below    --
        -- ------------------------------------------- --

    IF v_und_first = 0 THEN
        IF v_hgh_first = p_term THEN
            v_sgbstdn_levl_code := 'HGH';
            v_first_enroll := 'Y';
        ELSE   
            v_sgbstdn_levl_code := 'HGH';
            v_first_enroll := 'N';
        END IF;
    ELSE    
        IF v_und_first = p_term AND
           v_prev_coll IS NULL THEN
                v_sgbstdn_levl_code := 'UND';
                v_first_enroll := 'Y';
        ELSE
                v_sgbstdn_levl_code := 'UND';
                v_first_enroll := 'N';
        END IF;
    END IF;            
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 11: '||v_zrrsecl_pidm);
    END IF;
    

        -- ------------------------------------------- --
        -- Mark record as Institutionally-assigned SSN --
        -- ------------------------------------------- --

    v_ia_id_switch := 'N';
    
    
    IF SUBSTR(v_spbpers_ssn,1,3) = '000' 
        OR SUBSTR(v_spbpers_ssn,1,3) = '666' 
        OR SUBSTR(v_spbpers_ssn,1,3) >= '900'
    THEN v_ia_id_switch := 'Y';
    END IF;
   
    
        
    --  Cleanup Process End ---------------------------------------------------------------

/*    IF v_sgbstdn_levl_code='UND' THEN    
        v_inten    := 'UK';
    ELSE
        v_inten    := 'XX';
    END IF;                                */
    
    IF v_sgbstdn_levl_code <>'UND' THEN    
        v_inten    := 'XX';
    END IF; 
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 11a: '||v_zrrsecl_pidm);
    END IF;
     
    IF v_sgbuser_suda_code IS NULL THEN
    
      p_print_record('State Residency is Blank', v_zrrsecl_pidm);
      
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 11b: '||v_zrrsecl_pidm);
    END IF;
      
    ELSIF NOT ERROR_FOUND THEN 
    
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 11c: '||v_zrrsecl_pidm);
    END IF;
        
    v_delete_switch := 'N';


    -- inserting into this table to get the correct count for the header
    INSERT INTO sis_apps.hei_se_output
    (ID,ia_id_switch,sgbstdn_levl_code,spbpers_sex,spbpers_birth_date,ethn_hisp,ethn_amind,ethn_asian,ethn_black,ethn_hawaii,ethn_white,
     ethn_unkn,ethn_nonres,country_origin,sgbuser_suda_code,obor_code,spraddr_zip,hs_code,hs_year_grad,inten,YEAR,sess,first_enroll,
     first_name,middle_init,last_name,name_suffix,disab_ind,undprep_math,undprep_eng,armed_forces,ssid,delete_switch)
    VALUES
    (v_id,v_ia_id_switch,v_sgbstdn_levl_code,v_spbpers_sex,v_spbpers_birth_date,v_ethn_hisp,v_ethn_amind,v_ethn_asian,v_ethn_black,v_ethn_hawaii,v_ethn_white,
     v_ethn_unkn,v_ethn_nonres,v_country_origin,v_sgbuser_suda_code,v_obor_code,v_spraddr_zip,v_hs_code,v_hs_year_grad,v_inten,v_year,v_sess,v_first_enroll,
     v_first_name,v_middle_init,v_last_name,v_name_suffix,v_disab_ind,v_undprep_math,v_undprep_eng,v_armed_forces,v_ssid,v_delete_switch)
    ;
                                                                  
    END IF; 
    
    Update sis_apps.hei_se_output
    Set LAST_NAME = REGEXP_REPLACE(LAST_NAME, '[.]',' ');                                                                                                        
                                                                                                              
    IF v_zrrsecl_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 12: '||v_zrrsecl_pidm);
    END IF;

    END LOOP;
    CLOSE sefile_rec;  
    
    SELECT COUNT(*) INTO v_totrec FROM sis_apps.hei_se_output;
     
    -----------------------------------------------------------------------------
    --  SE First Record (File Header)                                          --
    -----------------------------------------------------------------------------    
    IF v_totrec > 0 THEN
        UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRASE'||v_year||v_sess||LPAD(v_totrec,6,0)||CHR(13));
    END IF;
       
    
    -- creating the output file
    FOR c_data IN (SELECT ID,ia_id_switch,sgbstdn_levl_code,spbpers_sex,spbpers_birth_date,ethn_hisp,ethn_amind,ethn_asian,
           ethn_black,ethn_hawaii,ethn_white,ethn_unkn,ethn_nonres,country_origin,sgbuser_suda_code,obor_code,
           spraddr_zip,hs_code,hs_year_grad,inten,YEAR,sess,first_enroll,first_name,last_name,middle_init,
           name_suffix,disab_ind,undprep_math,undprep_eng,armed_forces,ssid,delete_switch
    FROM sis_apps.hei_se_output)
    LOOP
       v_id := c_data.id;
       v_ia_id_switch := c_data.ia_id_switch;
       v_sgbstdn_levl_code := c_data.sgbstdn_levl_code;
       v_spbpers_sex := c_data.spbpers_sex;
       v_spbpers_birth_date := c_data.spbpers_birth_date;
       v_ethn_hisp := c_data.ethn_hisp;
       v_ethn_amind := c_data.ethn_amind;
       v_ethn_asian := c_data.ethn_asian;
       v_ethn_black := c_data.ethn_black;
       v_ethn_hawaii := c_data.ethn_hawaii;
       v_ethn_white := c_data.ethn_white;
       v_ethn_unkn := c_data.ethn_unkn;
       v_ethn_nonres := c_data.ethn_nonres;
       v_country_origin := c_data.country_origin;
       v_sgbuser_suda_code := c_data.sgbuser_suda_code;
       v_obor_code := c_data.obor_code;
       v_spraddr_zip := c_data.spraddr_zip;
       v_hs_code := c_data.hs_code;
       v_hs_year_grad := c_data.hs_year_grad;
       v_inten := c_data.inten;
       v_year := c_data.year;
       v_sess := c_data.sess;
       v_first_enroll := c_data.first_enroll;
       v_first_name := c_data.first_name;
       v_middle_init := c_data.middle_init;
       v_last_name := c_data.last_name;
       v_name_suffix := c_data.name_suffix;
       v_disab_ind := c_data.disab_ind;
       v_undprep_math := c_data.undprep_math;
       v_undprep_eng := c_data.undprep_eng;
       v_armed_forces := c_data.armed_forces;
       v_ssid := c_data.ssid;
       v_delete_switch := c_data.delete_switch;    
    
    UTL_FILE.PUT_LINE(FILE_HANDLE, v_id||v_ia_id_switch||v_sgbstdn_levl_code||v_spbpers_sex||v_spbpers_birth_date||
                                   v_ethn_hisp||v_ethn_amind||v_ethn_asian||v_ethn_black||v_ethn_hawaii||v_ethn_white||
                                   v_ethn_unkn||v_ethn_nonres||v_country_origin||v_sgbuser_suda_code||v_obor_code||
                                   v_spraddr_zip||v_hs_code||v_hs_year_grad||v_inten||v_year||v_sess||v_first_enroll||
                                   v_first_name||v_middle_init||v_last_name||v_name_suffix||v_disab_ind||
                                   v_undprep_math||v_undprep_eng||v_armed_forces||v_ssid||v_delete_switch||CHR(13),TRUE); 
              
    END LOOP; 

 /* 
  UTL_FILE.PUT_LINE(IC_REPT_HANDLE,' ');   
  UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'Total Number of IC Records: '|| v_tab_ic_records.COUNT);

  UTL_FILE.PUT_LINE(IC_REPT_HANDLE,'First: ' || v_tab_ic_records.FIRST); 
  UTL_FILE.PUT_LINE(IC_REPT_HANDLE,' Last: ' || v_tab_ic_records.LAST);
*/

--  CLOSE sefile_rec; 
  UTL_FILE.FCLOSE(FILE_HANDLE);
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  --UTL_FILE.FCLOSE(IC_REPT_HANDLE);

  -- ------------------- --
  -- Create the IC file  --
  -- ------------------- --
 -- IC_FILE_HANDLE := UTL_FILE.FOPEN(utl_file_dir, v_IC_filename,'w');
--  IF v_tab_ic_records.COUNT > 0 THEN
--       UTL_FILE.PUT_LINE(IC_FILE_HANDLE,'NSCCIC'||v_year||'NA'||LPAD(v_tab_ic_records.COUNT,6,0));
--      FOR i IN v_tab_ic_records.FIRST .. v_tab_ic_records.LAST
--      LOOP
--          UTL_FILE.PUT_LINE(IC_FILE_HANDLE, v_tab_ic_records(i));
--      END LOOP;
--  END IF;
--  UTL_FILE.FCLOSE(IC_FILE_HANDLE);  
  -- ------------------- --
  
  DBMS_OUTPUT.PUT_LINE('**End Procedure SE**');    
  
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE(FILE_HANDLE);
       UTL_FILE.FCLOSE(ERROR_HANDLE);
       --UTL_FILE.FCLOSE(IC_REPT_HANDLE);

 
 END PZ_CREATE_HEI_SE; 
   
  
PROCEDURE PZ_CREATE_HEI_AC(p_term IN VARCHAR2) IS
 /*=============================================================================
        AUTHOR: Bob Barringer

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_AC.

        TABLES: SPRIDEN - SELECT
                SPBPERS - SELECT
                SHRTRAM - SELECT
                SHRTRIT - SELECT
                SHRTCKN - SELECT
                SHRTCKG - SELECT
                SHRTATT - SELECT
                ZRBXWLK - SELECT
                STVSBGI - SELECT
==============================================================================*/ 
 
    
    v_pidm                       spriden.spriden_pidm%TYPE; 
    v_spriden_id                 spriden.spriden_id%TYPE;     
    v_student_identifier         varchar2(15);
    v_spriden_first_name         spriden.spriden_first_name%TYPE;    
    v_spriden_last_name          spriden.spriden_last_name%TYPE;    
    v_shrtatt_attr_code          varchar2(50);
    v_attr_code_merged           varchar2(100);
    v_shrtckn_course_comment     shrtckn.shrtckn_course_comment%TYPE;
    v_shrtrit_sbgi_code          shrtrit.shrtrit_sbgi_code%TYPE;
    v_sending_institution        varchar2(25);
    v_credit_hours               number;
    v_credit_hours_output        varchar2(4);
    v_shrtckg_grde_code_final    shrtckg.shrtckg_grde_code_final%TYPE;
    v_subj_code                  shrtrce.shrtrce_subj_code%TYPE;
    v_crse_numb                  shrtrce.shrtrce_crse_numb%TYPE;
    v_crse_title                 shrtrce.shrtrce_crse_title%TYPE;
    v_course_identifier          varchar2(12);
    v_indx                       number;
    v_type_of_credit             varchar2(100);   
    v_delete_switch              varchar2(1);
    v_sess                       varchar2(5);
    v_totrec                     int;
    v_year                       varchar2(4); 
    file_handle                  utl_file.file_type;
    error_handle                 utl_file.file_type;
    utl_file_dir                 varchar2(100);
    

    CURSOR cur_get_error IS 
        SELECT DISTINCT(a.shrtrit_sbgi_code) AS shrtrit_sbgi_code, NVL(c.zrbxwlk_ipeds_code, 'No IPEDS Code') AS zrbxwlk_ipeds_code, stvsbgi_desc
        FROM shrtrit a JOIN shrtatt b ON (a.shrtrit_pidm = b.shrtatt_pidm AND a.shrtrit_seq_no = b.shrtatt_trit_seq_no)
        LEFT OUTER JOIN sis_apps.zrbxwlk c ON (a.shrtrit_sbgi_code = c.zrbxwlk_ceeb_code)
        JOIN stvsbgi d ON (a.shrtrit_sbgi_code = d.stvsbgi_code)
        WHERE c.zrbxwlk_ipeds_code IS NULL
            AND a.shrtrit_sbgi_code NOT IN ('363427', '362227', '364979', '364089', '362090', '364930','363408', '365064', '361455', '364925', '360255', '363930', '363220', '363790', '363900', '360405', '364653', '365160');
    
   
 
/*
    The below query uses LISTAGG. Need to change to (e.shrtatt_attr_code, ', ' ON OVERFLOW TRUNCATE) once the database is Oracle version 12.2.0.1.0 or higher. 
    SELECT * FROM V$VERSION to see current version. 
*/
    
    CURSOR cur_get_attributes IS
        -- Transfer Credits
        SELECT DISTINCT a.shrtram_pidm AS pidm 
              ,d.spriden_id
              ,NVL(c.spbpers_ssn, d.spriden_id) AS student_identifier               
              ,d.spriden_first_name
              ,d.spriden_last_name
              ,CASE 
                    WHEN (b.shrtrit_sbgi_code IN ('363427', '362227', '364979', '364089', '362090', '364930') AND e.shrtatt_attr_code IN ('CT')) THEN 'CT'
                    WHEN e.shrtatt_attr_code = 'MT' THEN 'MT'
                    WHEN e.shrtatt_attr_code = 'TG' THEN 'TG'
                    WHEN e.shrtatt_attr_code IN ('TMAH', 'TMEN', 'TMSL', 'TMMT', 'TMNS', 'TMSS') THEN 'TM'
                    WHEN e.shrtatt_attr_code IS NULL THEN 'TC'
                    ELSE 'TC'
               END AS shrtatt_attr_code
              ,NVL(LISTAGG(e.shrtatt_attr_code, ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY e.shrtatt_attr_code) OVER (PARTITION BY d.spriden_id, b.shrtrit_sbgi_code, f.shrtrce_crse_title), 'TC') AS attr_code_merged
              ,'NO COURSE COMMMENT' AS shrtckn_course_comment
              ,b.shrtrit_sbgi_code            
              ,NVL(g.zrbxwlk_ipeds_code, 'XXXXXX') AS sending_institution
              ,NVL(SUM(f.shrtrce_credit_hours * 10), 0) AS credit_hours
              ,NULL AS shrtckg_grde_code_final
              ,f.shrtrce_subj_code AS subj_code
              ,f.shrtrce_crse_numb AS crse_numb
              ,f.shrtrce_crse_title AS crse_title
        FROM shrtrce f 
        LEFT OUTER JOIN shrtatt e ON (f.shrtrce_pidm = e.shrtatt_pidm AND f.shrtrce_tram_seq_no = e.shrtatt_tram_seq_no AND f.shrtrce_trit_seq_no = e.shrtatt_trit_seq_no AND f.shrtrce_seq_no = e.shrtatt_trce_seq_no)
        RIGHT OUTER JOIN shrtram a ON (f.shrtrce_pidm = a.shrtram_pidm AND f.shrtrce_tram_seq_no = a.shrtram_seq_no AND f.shrtrce_trit_seq_no = a.shrtram_trit_seq_no)
        JOIN shrtrit b ON (f.shrtrce_pidm = b.shrtrit_pidm AND f.shrtrce_trit_seq_no = b.shrtrit_seq_no)
        LEFT OUTER JOIN sis_apps.zrbxwlk g ON (b.shrtrit_sbgi_code = g.zrbxwlk_ceeb_code) 
        JOIN spbpers c ON (f.shrtrce_pidm = c.spbpers_pidm)
        JOIN spriden d ON (f.shrtrce_pidm = d.spriden_pidm)
        INNER JOIN (Select Distinct sfrstcr_pidm FROM SFRSTCR) e
                on e.SFRSTCR_PIDM = f.shrtrce_pidm
        INNER JOIN (Select Distinct shrtckn_pidm FROM shrtckn) g
                on g.shrtckn_pidm = f.shrtrce_pidm        
        WHERE a.shrtram_pidm = b.shrtrit_pidm
            AND a.shrtram_term_code_entered = p_term
            AND d.spriden_change_ind IS NULL
           -- AND e.SFRSTCR_TERM_CODE = p_term
        GROUP BY a.shrtram_pidm, d.spriden_id, NVL(c.spbpers_ssn, d.spriden_id), d.spriden_first_name, d.spriden_last_name, e.shrtatt_attr_code, b.shrtrit_sbgi_code, g.zrbxwlk_ipeds_code, f.shrtrce_subj_code, f.shrtrce_crse_numb, f.shrtrce_crse_title
             
        UNION
        
        -- Other Type of Credits
        SELECT DISTINCT a.shrtckn_pidm AS pidm
              ,d.spriden_id
              ,NVL(c.spbpers_ssn, d.spriden_id) AS student_identifier
              ,d.spriden_first_name
              ,d.spriden_last_name
              ,'NO ATTRIBUTE' AS shrtatt_attr_code
              ,'NO MERGED ATTRIBUTE' AS attr_code_merged
              ,NVL(a.shrtckn_course_comment, 'XX2') AS shrtckn_course_comment
              ,NULL 
              ,'XXXXXX' AS sending_institution
              ,NVL(SUM(b.shrtckg_credit_hours * 10), 0) AS credit_hours
              ,b.shrtckg_grde_code_final
              ,a.shrtckn_subj_code
              ,a.shrtckn_crse_numb   
              ,a.shrtckn_crse_title
        FROM shrtckn a 
        JOIN shrtckg b ON (a.shrtckn_pidm = b.shrtckg_pidm AND a.shrtckn_term_code = b.shrtckg_term_code AND a.shrtckn_seq_no = b.shrtckg_tckn_seq_no)
        JOIN spbpers c ON (a.shrtckn_pidm = c.spbpers_pidm)
        JOIN spriden d ON (a.shrtckn_pidm = d.spriden_pidm)
        JOIN sfrstcr e ON (a.shrtckn_pidm = e.sfrstcr_pidm)
        WHERE a.shrtckn_term_code = p_term
            AND b.shrtckg_grde_code_final = 'CR'
            AND d.spriden_change_ind IS NULL
        GROUP BY a.shrtckn_pidm, d.spriden_id, NVL(c.spbpers_ssn, d.spriden_id), d.spriden_first_name, d.spriden_last_name, a.shrtckn_course_comment, 'XXXXXX', b.shrtckg_grde_code_final, a.shrtckn_subj_code, a.shrtckn_crse_numb, a.shrtckn_crse_title;
            
       

    -- use this query to pull from temp and assign indx with row = 1 
    CURSOR cur_get_output_table IS  
        WITH hierarchy_table AS (
                                   SELECT 'CT' code, 1 indx FROM dual
                                   UNION
                                   SELECT 'MT1', 2 FROM dual 
                                   UNION
                                   SELECT 'TG', 3 FROM dual 
                                   UNION
                                   SELECT 'MT', 3 FROM dual 
                                   UNION
                                   SELECT 'MC', 4 FROM dual
                                   UNION
                                   SELECT 'TM', 5 FROM dual
                                   UNION
                                   SELECT 'TC', 6 FROM dual
                                   UNION
                                   SELECT 'AP', 7 FROM dual
                                   UNION
                                   SELECT 'AS', 7 FROM dual
                                   UNION
                                   SELECT 'EX', 7 FROM dual
                                   UNION
                                   SELECT 'HL', 7 FROM dual
                                   UNION
                                   SELECT 'SL', 7 FROM dual
                                   UNION
                                   SELECT 'CL', 7 FROM dual
                                   UNION
                                   SELECT 'PP', 7 FROM dual
                                   UNION
                                   SELECT 'PO', 7 FROM dual
                                   UNION
                                   SELECT 'CB', 7 FROM dual
                                   UNION
                                   SELECT 'ON', 7 FROM dual 
                                   UNION
                                   SELECT 'OT', 7 FROM dual
                                    ) 
        SELECT pidm, spriden_id, student_identifier, spriden_first_name, spriden_last_name, type_of_credit,sending_institution, LPAD(TO_CHAR(ROUND(SUM(credit_hours))), 4, 0) AS credit_hours, subj_code, crse_numb, delete_switch, indx 
        FROM (
                SELECT a.*, ROW_NUMBER () OVER (PARTITION BY student_identifier, sending_institution, crse_title, subj_code ORDER BY indx) AS row_num
                FROM (
                        SELECT ac.pidm, ac.spriden_id, ac.student_identifier, ac.spriden_first_name, ac.spriden_last_name, ac.type_of_credit, ac.sending_institution, ac.credit_hours, ac.subj_code, ac.crse_numb, ac.crse_title, 'N' AS delete_switch, ht.code, ht.indx
                        FROM sis_apps.hei_ac_temp ac JOIN hierarchy_table ht ON (ac.type_of_credit = ht.code) 
                        ORDER BY ac.sending_institution, ac.subj_code, ac.crse_numb, ht.indx
                    ) a
            ) b
        WHERE row_num = 1
        GROUP BY pidm, spriden_id, student_identifier, spriden_first_name, spriden_last_name, type_of_credit, sending_institution, subj_code, crse_numb, delete_switch, indx     
        ORDER BY student_identifier, indx; 
    
            
    CURSOR cur_get_output_file IS 
        SELECT student_identifier
              ,DECODE (type_of_credit, 'MT1', 'MT', type_of_credit) AS type_of_credit
              ,sending_institution
              ,credit_hours
              ,course_identifier
              ,delete_switch 
        FROM sis_apps.hei_ac_output;    

/**********************************************************************/
/***************              Main Program              ***************/
/**********************************************************************/

    BEGIN

        EXECUTE IMMEDIATE 'truncate table sis_apps.hei_ac_input drop storage';
        EXECUTE IMMEDIATE 'truncate table sis_apps.hei_ac_temp drop storage';
        EXECUTE IMMEDIATE 'truncate table sis_apps.hei_ac_output drop storage';
        
        OPEN cur_get_attributes;
            LOOP 
                v_pidm := '';                       
                v_spriden_id := '';                 
                v_student_identifier := '';         
                v_spriden_first_name := '';         
                v_spriden_last_name := '';  
                v_shrtatt_attr_code := ''; 
                v_attr_code_merged := '';
                v_shrtckn_course_comment := '';          
                v_shrtrit_sbgi_code := '';          
                v_sending_institution := '';        
                v_credit_hours := '';       
                v_shrtckg_grde_code_final := '';            
                v_subj_code := '';          
                v_crse_numb := '';          
                v_crse_title := '';      
                          
                FETCH cur_get_attributes
                    INTO v_pidm                  
                        ,v_spriden_id            
                        ,v_student_identifier    
                        ,v_spriden_first_name    
                        ,v_spriden_last_name     
                        ,v_shrtatt_attr_code  
                        ,v_attr_code_merged
                        ,v_shrtckn_course_comment   
                        ,v_shrtrit_sbgi_code     
                        ,v_sending_institution   
                        ,v_credit_hours   
                        ,v_shrtckg_grde_code_final       
                        ,v_subj_code     
                        ,v_crse_numb     
                        ,v_crse_title;    
                EXIT WHEN cur_get_attributes%NOTFOUND;  
                   

                INSERT INTO sis_apps.hei_ac_input (pidm, spriden_id, student_identifier, spriden_first_name, spriden_last_name, shrtatt_attr_code, attr_code_merged, shrtckn_course_comment, 
                                                   shrtrit_sbgi_code, sending_institution, credit_hours, shrtckg_grde_code_final, subj_code, crse_numb, crse_title)
                VALUES(v_pidm, v_spriden_id, v_student_identifier, v_spriden_first_name, v_spriden_last_name, v_shrtatt_attr_code, v_attr_code_merged, v_shrtckn_course_comment,
                       v_shrtrit_sbgi_code, v_sending_institution, v_credit_hours, v_shrtckg_grde_code_final, v_subj_code, v_crse_numb, v_crse_title);          
                COMMIT;
                    
                IF v_shrtrit_sbgi_code LIKE 'FM%' THEN 
                    IF REGEXP_LIKE (v_attr_code_merged, '(^|\W)MT($|\W)') THEN v_type_of_credit := 'MT1';  
                    ELSIF REGEXP_LIKE (v_attr_code_merged, '(^|\W)TG($|\W)') THEN v_type_of_credit := 'TG';
                    ELSE v_type_of_credit := 'MC';
                    END IF;
                ELSIF v_shrtrit_sbgi_code NOT LIKE 'FM%' THEN
                    IF REGEXP_LIKE (v_attr_code_merged, '(^|\W)TG($|\W)') THEN v_type_of_credit := 'TG';
                    ELSE v_type_of_credit := v_shrtatt_attr_code;
                    END IF;
                ELSE v_type_of_credit := v_shrtatt_attr_code;   
                END IF;
                           
                IF v_type_of_credit NOT IN ('CT', 'MT1', 'TG', 'MC', 'MT', 'TM', 'TC') THEN 
                    IF v_shrtckn_course_comment LIKE 'AP%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'AP';
                    ELSIF v_shrtckn_course_comment LIKE 'AS%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'AS';
                    ELSIF v_shrtckn_course_comment LIKE 'EX%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'EX';
                    ELSIF v_shrtckn_course_comment LIKE 'HL%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'HL';
                    ELSIF v_shrtckn_course_comment LIKE 'SL%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'SL';
                    ELSIF v_shrtckn_course_comment LIKE 'CL%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'CL';
                    ELSIF v_shrtckn_course_comment LIKE 'PO%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'PO';
                    ELSIF v_shrtckn_course_comment LIKE 'PP%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'PP';
                    ELSIF v_shrtckn_course_comment LIKE 'CB%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'CB';
                    ELSIF v_shrtckn_course_comment LIKE 'ON%' AND v_shrtckg_grde_code_final = 'CR' THEN v_type_of_credit := 'ON';
                    ELSE v_type_of_credit := 'OT';
                    END IF;
                END IF;
                                               
                INSERT INTO sis_apps.hei_ac_temp (pidm, spriden_id, student_identifier, spriden_first_name, spriden_last_name, type_of_credit, sending_institution, subj_code, crse_numb, crse_title, credit_hours)
                VALUES (v_pidm, v_spriden_id, v_student_identifier, v_spriden_first_name, v_spriden_last_name, v_type_of_credit, v_sending_institution, v_subj_code, v_crse_numb, v_crse_title, v_credit_hours);
                COMMIT;                
                
            END LOOP;
        CLOSE cur_get_attributes;        
         
        
        
        OPEN cur_get_output_table;
            LOOP
                v_pidm := '';    
                v_spriden_id := '';    
                v_student_identifier := '';    
                v_spriden_first_name := '';    
                v_spriden_last_name := '';    
                v_type_of_credit := '';    
                v_sending_institution := '';    
                v_credit_hours_output := ''; 
                v_subj_code := '';
                v_crse_numb := '';
                v_delete_switch := '';    
                v_indx := '';    
                
            FETCH cur_get_output_table
                INTO v_pidm
                    ,v_spriden_id
                    ,v_student_identifier
                    ,v_spriden_first_name
                    ,v_spriden_last_name
                    ,v_type_of_credit
                    ,v_sending_institution
                    ,v_credit_hours_output
                    ,v_subj_code
                    ,v_crse_numb
                    ,v_delete_switch
                    ,v_indx;
                EXIT WHEN cur_get_output_table%NOTFOUND;  
                
                IF v_type_of_credit = 'MT1' THEN v_type_of_credit := 'MT';
                END IF;
                
                v_course_identifier := RPAD(v_subj_code || v_crse_numb, 12, ' ');
                
                
                INSERT INTO sis_apps.hei_ac_output VALUES (v_pidm, v_spriden_id, v_student_identifier, v_spriden_first_name, v_spriden_last_name, v_type_of_credit, 
                                                           v_sending_institution, v_credit_hours_output, v_course_identifier, v_delete_switch, v_indx);
                COMMIT;
                
            END LOOP;
        CLOSE cur_get_output_table;    
                
        -- this gets a record count for the header record
        SELECT COUNT(*) INTO v_totrec FROM sis_apps.hei_ac_output;
        
        v_year := SUBSTR(p_term, 1, 4);
        v_sess := SUBSTR(p_term, 5, 2);
        
        IF v_sess = '30' THEN
            v_sess := 'SM';
        ELSIF v_sess = '40' THEN
            v_sess := 'AU';
        ELSIF v_sess = '10' THEN
            v_sess := 'SP';
        END IF;
  
  
-----------------------------------------------------------------------------
  utl_file_dir := 'STU_OUT';
  FILE_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'AC_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'AC_errors.lis','w');    
-----------------------------------------------------------------------------

    -----------------------------------------------------------------------------
    --  AC First Record (File Header)                                          --
    -----------------------------------------------------------------------------
    /*
     not putting this in the above loop because the header record on the output file needs to be at the top 
     and the cur_get_output_table loop does not know how many records will be in the file until it is done
    */
    
        IF v_totrec > 0 THEN
            UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRAAC'||v_year||v_sess||LPAD(v_totrec, 6, 0));
        END IF;
        
        OPEN cur_get_output_file;
            LOOP 
                v_student_identifier := '';   
                v_type_of_credit := '';   
                v_sending_institution := '';   
                v_credit_hours_output := '';
                v_course_identifier := '';   
                v_delete_switch := ''; 
               
            FETCH cur_get_output_file
                INTO v_student_identifier
                    ,v_type_of_credit
                    ,v_sending_institution
                    ,v_credit_hours_output
                    ,v_course_identifier
                    ,v_delete_switch; 
                EXIT WHEN cur_get_output_file%NOTFOUND; 
                
                UTL_FILE.PUT_LINE(
                    FILE_HANDLE, v_student_identifier || v_type_of_credit || v_sending_institution || v_credit_hours_output || v_course_identifier || v_delete_switch || CHR(13));
           
            END LOOP;
        CLOSE cur_get_output_file;
        
        UTL_FILE.PUT_LINE(ERROR_HANDLE,'SHRTRIT_SBGI_CODE' || ',' || 'ZRBXWLK_IPEDS_CODE' || ',' || 'STVSBGI_DESC');
        FOR c1_rec IN cur_get_error LOOP
            UTL_FILE.PUT_LINE(
            ERROR_HANDLE,c1_rec.shrtrit_sbgi_code || ',' || c1_rec.zrbxwlk_ipeds_code || ',' || c1_rec.stvsbgi_desc || CHR(13) 
            );         
        END LOOP;
        
        UTL_FILE.FCLOSE(FILE_HANDLE);
        UTL_FILE.FCLOSE(ERROR_HANDLE);
    
        
      
    EXCEPTION
        WHEN OTHERS
        THEN NULL;   
          
        
END PZ_CREATE_HEI_AC;



PROCEDURE PZ_CREATE_HEI_CNSN (p_term IN VARCHAR2)
IS
    /*===============================================================================
           AUTHOR: Meena

      DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_CNSN.

           TABLES: SFRSTCR - SELECT
                   SOBPTRM - SELECT
                   SGBSTDN - SELECT
                   SPBPERS - SELECT
                   SSBSECT - SELECT
                   SPRIDEN - SELECT
                   SHRGRDE - SELECT
                   SGRSATT - SELECT

           VIEWS:  SZV0910 - SELECT

   ==============================================================================*/
    -- Set v_debug_pidm with a value for Debugging purposes ..

    v_debug_pidm               NUMBER (9);

    v_insert_count             NUMBER := 0;
    no_param_exception         EXCEPTION;
    v_totrec_cn                NUMBER;
    v_totrec_sn                NUMBER;
    v_sess                     VARCHAR2 (5);
    v_year                     VARCHAR2 (8);
    v_sfrstcr_pidm             NUMBER (9);
    v_sfrstcr_crn              VARCHAR2 (5);
    v_ssbsect_camp_code        VARCHAR2 (4);
    v_spbpers_ssn              VARCHAR2 (9);
    v_ssbsect_subj_code        VARCHAR2 (4);
    v_ssbsect_crse_numb        VARCHAR2 (5);
    v_ssbsect_seq_numb         VARCHAR2 (6);
    v_sfrstcr_credit_hr        VARCHAR2 (3);
    v_sfrstcr_rsts_code        VARCHAR2 (1);
    v_real_rsts_code           VARCHAR2 (2);
    v_shrtgpa_hours_earned     NUMBER (5);
    v_course_iden              VARCHAR2 (12);
    v_acad_award               VARCHAR2 (1);
    v_shrtckn_subj_code        VARCHAR2 (4);
    v_shrtckn_crse_numb        VARCHAR2 (5);
    v_scbsupp_cuda_code        VARCHAR2 (15);
    v_sgbstdn_levl_code        VARCHAR2 (2);
    v_stu_class                VARCHAR2 (2);
    v_sgbstdn_resd_code        VARCHAR2 (1);
    v_special_status           VARCHAR2 (1);
    v_sgbstdn_styp_code        VARCHAR2 (1);
    v_sgbstdn_majr_code_1      VARCHAR2 (4);
    v_s_hours                  NUMBER (4);
    v_shrtrit_sbgi_code        VARCHAR (6);
    v_cum_shrtgpa_hours        NUMBER (5);
    v_cum_shrtrce_hours        NUMBER (5);
    v_cum_credit_hrs           NUMBER (5);
    v_cum_credit_hours         VARCHAR (5);
    v_rec_present              VARCHAR2 (1);
    v_hours_earned             NUMBER (8);
    v_shrtgpa_gpa_hours        NUMBER (8);
    v_shrtgpa_quality_points   NUMBER (8);
    v_stu_rank                 VARCHAR2 (2);
    v_stvmajr_cipc_code        VARCHAR2 (6);
    v_liv_arr                  VARCHAR2 (1);
    v_stu_subsidy              VARCHAR2 (2);
    v_spbpers_sex              VARCHAR2 (1);
    v_sfrstcr_pidm_old         NUMBER (9);
    v_ssbsect_camp_code_old    VARCHAR2 (4);
    v_spriden_id               VARCHAR2 (9);
    v_spriden_last_name        VARCHAR2 (60);
    v_dup_exists               NUMBER;
    v_spbpers_birth_date       DATE;
    v_stvterm_start_date       DATE;
    v_26_dob                   DATE;
    v_18_dob                   DATE;

    v_dprog                    VARCHAR2 (15);

    v_id                       VARCHAR2 (9);
    v_pseo                     VARCHAR2 (1);
    v_ccp                      VARCHAR2 (1);

    v_course_outcome           VARCHAR2 (5);
    v_course_grade             VARCHAR2 (5);
    v_delete_switch            VARCHAR2 (1);
    v_incarcerated             VARCHAR2 (1) := 'N';

    gmod_code                  SATURN.SFRSTCR.SFRSTCR_GMOD_CODE%TYPE;
    grde_code                  SATURN.SFRSTCR.SFRSTCR_GRDE_CODE%TYPE;
    quality_points             SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;

    grde_code2                 SATURN.SFRSTCR.SFRSTCR_GRDE_CODE%TYPE;
    quality_points2            SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;
    lab_points                 SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;
    
    utl_file_dir               VARCHAR2 (100);


    WS_FIRST_REC               BOOLEAN := TRUE;
    WS_FIRST_GRADE             BOOLEAN := TRUE;
    ERROR_FOUND                BOOLEAN := FALSE;

    FILE_HANDLE_CN             UTL_FILE.FILE_TYPE;
    FILE_HANDLE_SN             UTL_FILE.FILE_TYPE;
    GRADES_HANDLE              UTL_FILE.FILE_TYPE;
    ERROR_HANDLE               UTL_FILE.FILE_TYPE;
    
    CURSOR cnfile_rec (v_term VARCHAR2)
    IS
          WITH get_data AS (
                            SELECT szv0910_pidm,
                                   szv0910_crn,
                                   'TRRA' AS campus,
                                   d.spbpers_ssn,
                                   SUBSTR (szv0910_course, 1, 3) AS subj_code,
                                   SUBSTR (szv0910_course, 4, 4) AS crse_numb,
                                   SUBSTR (szv0910_course, -3) AS seq_numb,
                                   LPAD (ROUND (NVL (szv0910_crd, 0), 1) * 10, 3, 0) AS credit_hr,
                                   DECODE (szv0910_rsts_code, 'AU', 'A', 'I') AS rsts_code,
                                   c.sgbstdn_levl_code,
                                   f_class_calc_fnc (szv0910_pidm, c.sgbstdn_levl_code, v_term) AS stu_class,
                                   DECODE (c.sgbstdn_resd_code,
                                           'A', 'R',
                                           '0', 'R',
                                           'F', 'N',
                                           'M', 'N',
                                           'O', 'N',
                                           'I', 'N',
                                           c.sgbstdn_resd_code) AS resd_code,
                                   c.sgbstdn_styp_code,
                                   NVL (c.sgbstdn_majr_code_1, 'UNDE') AS sgbstdn_majr_code_1,
                                   d.spbpers_sex,
                                   f.spriden_last_name,
                                   f.spriden_id,
                                   d.spbpers_birth_date,
                                   szv0910_gmod_code,
                                   szv0910_grde_code,
                                   NVL (g.shrgrde_quality_points, 0) AS shrgrde_quality_points, 
                                   szv0910_rsts_code,
                                   ROW_NUMBER() OVER (PARTITION BY szv0910_pidm, szv0910_course ORDER BY ROWNUM) AS rk
                            FROM sis_apps.szv0910,
                                 sgbstdn c,
                                 spbpers d,
                                 ssbsect e,
                                 spriden f,
                                 shrgrde g     
                            WHERE c.sgbstdn_pidm = szv0910_pidm
                               AND c.sgbstdn_term_code_eff =
                                   (SELECT MAX (f.sgbstdn_term_code_eff)
                                    FROM sgbstdn f
                                    WHERE f.sgbstdn_pidm = c.sgbstdn_pidm
                                       AND f.sgbstdn_term_code_eff <= v_term)
                               AND d.spbpers_pidm = szv0910_pidm
                               AND e.ssbsect_term_code = v_term
                               AND e.ssbsect_crn = szv0910_crn
                               AND f.spriden_pidm = szv0910_pidm
                               AND f.spriden_change_ind IS NULL
                               AND shrgrde_code(+) = szv0910_grde_code 
                               AND shrgrde_levl_code(+) = 'UG' 
                               AND f.spriden_last_name NOT LIKE '%DUPLICATE%'
                               AND (szv0910_course NOT LIKE '%FOC%' OR e.ssbsect_subj_code != 'FOC')
                            ORDER BY d.spbpers_ssn, szv0910_crn
                           )
          SELECT szv0910_pidm,
                 szv0910_crn,
                 campus,
                 spbpers_ssn,
                 subj_code,
                 crse_numb,
                 seq_numb,
                 credit_hr,
                 rsts_code,
                 sgbstdn_levl_code,
                 stu_class,
                 resd_code,
                 sgbstdn_styp_code,
                 sgbstdn_majr_code_1,
                 spbpers_sex,
                 spriden_last_name,
                 spriden_id,
                 spbpers_birth_date,
                 szv0910_gmod_code,
                 szv0910_grde_code,
                 shrgrde_quality_points,
                 szv0910_rsts_code
          FROM get_data 
          WHERE rk = 1
          ORDER BY szv0910_pidm       
  ;


    -----------------------------------------------------------------------------
    -- Procedure: P_Print_Error                                                --
    -- Prints the record with the error message passed in as a parameter       --
    -----------------------------------------------------------------------------
    PROCEDURE p_print_record (messagein VARCHAR2, pidmin NUMBER)
    IS
        ws_pline   VARCHAR2 (250);
        ws_id      VARCHAR2 (9);
        ws_name    VARCHAR2 (32);
        ws_run     VARCHAR2 (20);
        ws_ssn     VARCHAR2 (9); 
        ws_file    VARCHAR2 (2);                               
    BEGIN
        IF ws_first_rec
        THEN
            SELECT TO_CHAR (SYSDATE, 'MM/DD/YYYY @ HH24:MI')
              INTO ws_run
              FROM dual;

    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                    TRRA; Fremont, OHIO');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: PZ_CREATE_HEI_CNSN               Errors found while generating HEI CN OR SN File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Banner ID SSN       PIDM     Name                     File Message');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------- --------- -------- ------------------------ ---- ---------------------------------------------');
  END IF;

  ws_first_rec := FALSE;


        BEGIN
            SELECT spriden_id,
                   RPAD (
                       SUBSTR (
                              spriden_last_name
                           || ', '
                           || spriden_first_name
                           || ' '
                           || spriden_mi,
                           1,
                           32),
                       32,
                       ' '),
                   spbpers_ssn
              INTO ws_id, ws_name, ws_ssn
              FROM spriden, spbpers
             WHERE spriden_pidm = pidmIn
                   AND spriden_change_ind IS NULL
                   AND spriden_pidm = spbpers_pidm;
        EXCEPTION
            WHEN OTHERS
            THEN
                ws_name := 'Error reading SPRIDEN for pidm= ' || pidmIn;
                ws_id := '????????';
        END;

        ws_pline := ws_id||' '||ws_ssn || ' ' || pidmIn ||'   '|| SUBSTR(ws_name,1,24) || ' ' ||messageIn;

        UTL_FILE.PUT_LINE (ERROR_HANDLE, ws_pline);
    END p_print_record;


    -- --------------------------------------------
    -- Function: FZ_get_cutoff_date
    -- Get the data collection cutoff date
    -- --------------------------------------------
    FUNCTION FZ_get_cutoff_date (p_term VARCHAR2)
        RETURN VARCHAR2
    AS
        v_cutoff_date   VARCHAR2 (24) := NULL;
    BEGIN
        BEGIN
            SELECT TO_CHAR (
                       NVL (sobptrm_census_2_date, sobptrm_end_date + 30),
                       'MM/DD/YYYY')
              INTO v_cutoff_date
              FROM sobptrm
             WHERE sobptrm_term_code = p_term AND sobptrm_ptrm_code = '1';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cutoff_date := TO_CHAR (TRUNC (SYSDATE), 'MM/DD/YYYY');
            WHEN OTHERS
            THEN
                v_cutoff_date := TO_CHAR (TRUNC (SYSDATE), 'MM/DD/YYYY');
        END;

        RETURN v_cutoff_date;
    END FZ_get_cutoff_date;


    -- --------------------------------------------
    -- Procedure: P_Print_No_AC_courses
    -- Prints the No Academic Credit Record
    -- --------------------------------------------
    PROCEDURE P_Print_No_AC_courses (p_term             VARCHAR2,
                                     p_crn              NUMBER,
                                     p_pidm             NUMBER,
                                     p_spriden_id       VARCHAR2,
                                     p_quality_points   NUMBER,
                                     p_grde_code        VARCHAR2,
                                     p_gmod_code        VARCHAR2,
                                     p_rsts_code        VARCHAR2)
    IS
        v_rsts_desc   VARCHAR2 (30) := NULL;
        v_gmod_desc   VARCHAR2 (30) := NULL;
        v_cutoff      VARCHAR2 (24) := NULL;
    BEGIN
        IF ws_first_grade
        THEN
            v_cutoff := FZ_get_cutoff_date (p_term);
            UTL_FILE.PUT_LINE (GRADES_HANDLE, 'Cutoff Date: ' || v_cutoff);
            UTL_FILE.PUT_LINE (
                GRADES_HANDLE,
                'Term,CRN,PIDM,Spriden_ID,Points,Grade,GMOD Code,GMOD Desc,RSTS Code,RSTS Desc');
        END IF;

        ws_first_grade := FALSE;

        BEGIN
            SELECT STVGMOD_DESC
              INTO v_gmod_desc
              FROM stvgmod
             WHERE STVGMOD_CODE = p_gmod_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_gmod_desc := '?';
            WHEN OTHERS
            THEN
                v_gmod_desc := '!?';
        END;

        BEGIN
            SELECT STVRSTS_DESC
              INTO v_rsts_desc
              FROM stvrsts
             WHERE STVRSTS_CODE = p_rsts_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rsts_desc := '?';
            WHEN OTHERS
            THEN
                v_rsts_desc := '!?';
        END;

    UTL_FILE.PUT_LINE (
            GRADES_HANDLE,
               p_term
            || ','
            || p_crn
            || ','
            || p_pidm
            || ','
            || p_spriden_id
            || ','
            || p_quality_points
            || ','
            || p_grde_code
            || ','
            || p_gmod_code
            || ','
            || v_gmod_desc
            || ','
            || p_rsts_code
            || ','
            || v_rsts_desc);
            
    END P_Print_No_AC_courses;


    -- --------------------------------------------
    -- Procedure: P_Print_AC_courses
    -- Prints Academic Record
    -- --------------------------------------------
    PROCEDURE P_Print_AC_courses (p_term              VARCHAR2,
                                  p_crn               NUMBER,
                                  p_pidm              NUMBER,
                                  p_spriden_id        VARCHAR2,
                                  p_quality_points    NUMBER,
                                  p_quality_points2   NUMBER,
                                  p_grde_code         VARCHAR2,
                                  p_grde_code2        VARCHAR2,
                                  p_gmod_code         VARCHAR2,
                                  p_rsts_code         VARCHAR2)
    IS
        v_rsts_desc   VARCHAR2 (30) := NULL;
        v_gmod_desc   VARCHAR2 (30) := NULL;
        v_cutoff      VARCHAR2 (24) := NULL;
    BEGIN
        IF ws_first_grade
        THEN
            v_cutoff := FZ_get_cutoff_date (p_term);
            UTL_FILE.PUT_LINE (ERROR_HANDLE, 'Cutoff Date: ' || v_cutoff);
            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                'Term,CRN,PIDM,Spriden_ID,Points,Grade,GMOD Code,GMOD Desc,RSTS Code,RSTS Desc');
        END IF;

        ws_first_grade := FALSE;

        BEGIN
            SELECT STVGMOD_DESC
              INTO v_gmod_desc
              FROM stvgmod
             WHERE STVGMOD_CODE = p_gmod_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_gmod_desc := '?';
            WHEN OTHERS
            THEN
                v_gmod_desc := '!?';
        END;

        BEGIN
            SELECT STVRSTS_DESC
              INTO v_rsts_desc
              FROM stvrsts
             WHERE STVRSTS_CODE = p_rsts_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rsts_desc := '?';
            WHEN OTHERS
            THEN
                v_rsts_desc := '!?';
        END;

        UTL_FILE.PUT_LINE (
            ERROR_HANDLE,
               p_term
            || ','
            || p_crn
            || ','
            || p_pidm
            || ','
            || p_spriden_id
            || ','
            || p_quality_points
            || ':'
            || p_quality_points2
            || ','
            || p_grde_code
            || ':'
            || p_grde_code2
            || ','
            || p_gmod_code
            || ','
            || v_gmod_desc
            || ','
            || p_rsts_code
            || ','
            || v_rsts_desc);
            
    END P_Print_AC_courses;


    -----------------------------------------------------------------------------
    -- Procedure: FZ_get_academic_program_code                                 --
    -- Builds the Academic Program Code and returns to the calling procedure.  --
    -----------------------------------------------------------------------------
    FUNCTION FZ_get_academic_program_code (v_pidm NUMBER)
        RETURN VARCHAR2
    AS
        ws_ap_code   VARCHAR2 (15) := NULL;
    BEGIN

        SELECT a.sgbstdn_program_1
          INTO ws_ap_code
          FROM sgbstdn a                           
         WHERE a.sgbstdn_pidm = v_pidm
               AND a.sgbstdn_term_code_eff =
                   (SELECT MAX (b.sgbstdn_term_code_eff)
                      FROM sgbstdn b
                     WHERE     a.sgbstdn_pidm = b.sgbstdn_pidm
                           AND b.sgbstdn_term_code_eff <= p_term);


        IF SUBSTR (ws_ap_code, 1, 3) = 'UND'
        THEN
            ws_ap_code := 'UNDECI';
        END IF;


        RETURN ws_ap_code;
    EXCEPTION
        WHEN NO_DATA_FOUND
        THEN
            RETURN 'UNDECIDE    ';
        WHEN OTHERS
        THEN
            RETURN 'UNDECIDE    ';
    END fz_get_academic_program_code;


    -- --------------------------------------------
    -- Function: fz_get_final_grade
    -- --------------------------------------------
    FUNCTION FZ_get_final_grade (p_term varchar2, p_pidm number, p_crn varchar2)
        RETURN varchar2
    AS
        v_final_grade   varchar2 (10) := '?';
    BEGIN

    
        BEGIN
            SELECT a.shrtckg_grde_code_final
              INTO v_final_grade
              FROM shrtckn, shrtckg a, sobptrm
             WHERE shrtckn_pidm = p_pidm
                   AND shrtckn_crn = p_crn
                   AND shrtckn_term_code = p_term
                   AND a.shrtckg_pidm = shrtckn_pidm
                   AND a.shrtckg_term_code = shrtckn_term_code
                   AND a.shrtckg_tckn_seq_no = shrtckn_seq_no
                   AND a.shrtckg_seq_no =
                       (SELECT MAX (b.shrtckg_seq_no)
                          FROM shrtckg b
                         WHERE     a.shrtckg_pidm = b.shrtckg_pidm
                               AND a.shrtckg_term_code = b.shrtckg_term_code
                               AND a.shrtckg_tckn_seq_no =
                                   b.shrtckg_tckn_seq_no)
                   AND sobptrm_term_code = p_term
                   AND sobptrm_ptrm_code = '1'
            ;
            
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_final_grade := '?';
        END;

        RETURN v_final_grade;
    END fz_get_final_grade;


    -- --------------------------------------------
    -- Function: FZ_get_quality_points
    -- Calculate the student's quality points
    -- --------------------------------------------
    FUNCTION fz_get_quality_points (p_grade VARCHAR2, p_level VARCHAR2, p_term VARCHAR2)
        RETURN NUMBER
    AS
        v_quality_points NUMBER (6, 3) := 0;
    BEGIN
        BEGIN
                SELECT shrgrde_quality_points
                INTO v_quality_points
                FROM shrgrde a
                WHERE shrgrde_code = p_grade 
                    AND shrgrde_levl_code = p_level 
                    AND shrgrde_term_code_effective = (
                                                        SELECT MAX(b.shrgrde_term_code_effective)
                                                        FROM shrgrde b 
                                                        WHERE b.shrgrde_code = a.shrgrde_code
                                                            AND b.shrgrde_levl_code = a.shrgrde_levl_code
                                                            AND b.shrgrde_term_code_effective <= p_term
                                                      );
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_quality_points := 0;
        END;

        RETURN v_quality_points;
    END FZ_get_quality_points;


    -- --------------------------------------------
    -- Function: fz_get_pseo
    -- Check if Student has an attribute for PSEO - Option A or B
    -- --------------------------------------------
    FUNCTION fz_get_pseo (p_pidm NUMBER, p_term VARCHAR2)
        RETURN VARCHAR2
    AS
        v_pseo_code VARCHAR2 (1) := '?';
    BEGIN
        BEGIN
            SELECT SUBSTR (sgrsatt_atts_code, 4, 1)
              INTO v_pseo_code
              FROM sgrsatt
             WHERE sgrsatt_pidm = p_pidm
                   AND sgrsatt_term_code_eff = p_term
                   AND sgrsatt_atts_code LIKE 'PSE%';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_pseo_code := '?';
        END;

        RETURN v_pseo_code;
    END fz_get_pseo;


    ----------------------------------------------------------------------------
    -- Function: fz_get_ccp
    -- Check if Student has an attribute for College Credit Plus (CCP)
    ----------------------------------------------------------------------------
    FUNCTION fz_get_ccp (p_pidm NUMBER, p_term VARCHAR2)
        RETURN VARCHAR2
    AS
        v_ccp_code   VARCHAR2 (1) := '?';
    BEGIN
        BEGIN

            SELECT DISTINCT
                   CASE
                       WHEN cpmtAmt > 0 AND (tccpAmt > 0 OR tutpAmt > 0)
                       THEN
                           CASE
                               WHEN     (   tccpamt = cpmtamt
                                         OR tutpamt = cpmtamt)
                                    AND (   sorbchr_bchr_code <> 'A'
                                         OR sorbchr_bchr_code IS NULL)
                                    AND (   sobsbgi_stat_code = 'OH'
                                         OR sorhsch_sbgi_code = '969999')
                               THEN
                                   'E'
                               WHEN     (   tccpamt > cpmtamt
                                         OR tutpamt > cpmtamt)
                                    AND (   sorbchr_bchr_code <> 'A'
                                         OR sorbchr_bchr_code IS NULL)
                                    AND (   sobsbgi_stat_code = 'OH'
                                         OR sorhsch_sbgi_code = '969999')
                               THEN
                                   'F'
                               WHEN     sorbchr_bchr_code = 'A'
                                    AND sobsbgi_stat_code = 'OH'
                               THEN
                                   'D'
                               ELSE
                                   '?'
                           END
                       WHEN cpmtAmt IS NULL OR cpmtAmt = 0
                       THEN
                           'G'
                       ELSE
                           '?'
                   END
              INTO v_ccp_code
              FROM sgrsatt  a
                   LEFT OUTER JOIN -- we think this is something NW State came up with to see people with multiple attributes, probably not needed for Terra
                   (  SELECT b.sgrsatt_pidm AS pidm,
                             RTRIM (
                                 xmlagg (
                                     XMLELEMENT (e, b.sgrsatt_atts_code || ',')).EXTRACT (
                                     '//text()'),
                                 ',')          attr
                       FROM sgrsatt b
                       WHERE b.sgrsatt_pidm = p_pidm
                             AND b.sgrsatt_term_code_eff <= p_term  
                    GROUP BY b.sgrsatt_pidm) att
                       ON (a.sgrsatt_pidm = att.pidm)      
                   LEFT OUTER JOIN
                   (  SELECT tbraccd_pidm, SUM (tbraccd_amount) AS tccpAmt
                        FROM tbraccd
                       WHERE tbraccd_pidm = p_pidm
                             AND tbraccd_detail_code = 'TCCP'
                             AND tbraccd_term_code = p_term
                    GROUP BY tbraccd_pidm) tccprec
                       ON (tccprec.tbraccd_pidm = a.sgrsatt_pidm)
                   LEFT OUTER JOIN
                   (  SELECT tbraccd_pidm, SUM (tbraccd_amount) AS tutpAmt
                        FROM tbraccd
                       WHERE     tbraccd_pidm = p_pidm
                             AND tbraccd_detail_code = 'TUTP'
                             AND tbraccd_term_code = p_term
                    GROUP BY tbraccd_pidm) tutprec
                       ON (tutprec.tbraccd_pidm = a.sgrsatt_pidm)
                   LEFT OUTER JOIN
                   (  SELECT tbraccd_pidm, SUM (tbraccd_amount) AS cpmtAmt
                        FROM tbraccd
                       WHERE     tbraccd_pidm = p_pidm
                             AND tbraccd_detail_code = 'CPMQ'
                             -- AND tbraccd_detail_code = 'CPMT' -- changed to CPMQ per request of Sherri
                             AND tbraccd_term_code = p_term
                             -- AND tbraccd_crossref_pidm in (86122, 86123)  -- testing "College Credit Plus" & "Tech Prep" 
                    GROUP BY tbraccd_pidm) cpmtrec
                       ON (cpmtrec.tbraccd_pidm = a.sgrsatt_pidm)
                   LEFT OUTER JOIN sorhsch ON (a.sgrsatt_pidm = sorhsch_pidm)
                   LEFT OUTER JOIN sorbchr
                       ON (sorhsch_sbgi_code = sorbchr_sbgi_code
                          AND sorbchr_demo_year = SUBSTR (p_term, 0, 4))
                   JOIN SOBSBGI
                       ON (sorhsch_sbgi_code = SOBSBGI_sbgi_code)
             WHERE     a.sgrsatt_pidm = p_pidm
                   AND  (SELECT MAX(sgrsatt_term_code_eff) 
                           FROM sgrsatt 
                         WHERE sgrsatt_pidm = p_pidm
                         AND sgrsatt_term_code_eff <= p_term) = a.sgrsatt_term_code_eff 
                   AND a.sgrsatt_atts_code IN ('CCP', 'TEPR');
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_ccp_code := '?';
            WHEN TOO_MANY_ROWS THEN
            --ERROR_FOUND := TRUE;
               -- v_ccp_code := '|';
            DBMS_OUTPUT.PUT_LINE('TOO MANY ROWS: ' || p_pidm || p_term);    
            raise_application_error (
                    -20002,
                       'Too many rows returned for CCP - '
                    || SQLCODE
                    || ' -ERROR- '
                    || SQLERRM);
            WHEN OTHERS
            THEN
                raise_application_error (
                    -20001,
                       'An error was encountered - '
                    || SQLCODE
                    || ' -ERROR- '
                    || SQLERRM);
        END;

        RETURN v_ccp_code;
    END FZ_get_ccp;

/**********************************************************************/
/***************              Main Program              ***************/
/**********************************************************************/
BEGIN
    --  Scripts to run each Term ..

    --Drop and Create View for the Term..
    ODHE_DropAdd (P_Term);
      
    -- Set a value in the v_debug_pidm variable for debugging ..    
    --DBMS_OUTPUT.PUT_LINE ('Debugging this pidm: ' || v_debug_pidm);

    -----------------------------------------------------------------------------
    DBMS_OUTPUT.PUT_LINE ('**Begin Procedure CNSN**');          
    utl_file_dir := 'STU_OUT';
    FILE_HANDLE_CN := UTL_FILE.FOPEN (utl_file_dir, 'CN_filedata.dat', 'w');
    FILE_HANDLE_SN := UTL_FILE.FOPEN (utl_file_dir, 'SN_filedata.dat', 'w');
    ERROR_HANDLE := UTL_FILE.FOPEN (utl_file_dir, 'zrrcnsn_errors.lis', 'w');
    GRADES_HANDLE := UTL_FILE.FOPEN (utl_file_dir, 'zrrcnsn_grades.csv', 'w');

    -----------------------------------------------------------------------------


    OPEN cnfile_rec (p_term);
    
    -- CN is run each semester and builds the data into this table, CU uses that data once per year
    -- this is why we do not truncate the CN output table
    EXECUTE IMMEDIATE 'truncate table sis_apps.hei_sn_output';    
    
    
    SELECT stvterm_start_date,
           ADD_MONTHS (stvterm_start_date             
                                         , -26 * 12),
           ADD_MONTHS (stvterm_start_date             
                                         , -18 * 12)
      INTO v_stvterm_start_date, v_26_dob, v_18_dob
      FROM stvterm
     WHERE stvterm_code = p_term;

    LOOP
        v_sfrstcr_crn := '';
        v_ssbsect_camp_code := '';
        v_spbpers_ssn := '';
        v_ssbsect_subj_code := '';
        v_ssbsect_crse_numb := '';
        v_ssbsect_seq_numb := '';
        v_sfrstcr_credit_hr := 0;
        v_sfrstcr_rsts_code := '';
        v_real_rsts_code := '';
        v_sgbstdn_levl_code := '';
        v_stu_class := '';
        v_stu_rank := '';
        v_sgbstdn_resd_code := '';
        v_stu_subsidy := '';
        v_sgbstdn_styp_code := '';
        v_sgbstdn_majr_code_1 := '';
        v_spbpers_sex := '';
        v_spriden_last_name := '';
        v_spriden_id := '';
        v_spbpers_birth_date := '';
        v_dprog := '';            
        v_course_grade := '';  
        v_course_outcome := '';
        v_delete_switch := 'N';
        ERROR_FOUND := FALSE;

        FETCH cnfile_rec
            INTO v_sfrstcr_pidm,
                 v_sfrstcr_crn,
                 v_ssbsect_camp_code,
                 v_spbpers_ssn,
                 v_ssbsect_subj_code,
                 v_ssbsect_crse_numb,
                 v_ssbsect_seq_numb,
                 v_sfrstcr_credit_hr,
                 v_sfrstcr_rsts_code,
                 v_sgbstdn_levl_code,
                 v_stu_class,
                 v_sgbstdn_resd_code,
                 v_sgbstdn_styp_code,
                 v_sgbstdn_majr_code_1,
                 v_spbpers_sex,
                 v_spriden_last_name,
                 v_spriden_id,
                 v_spbpers_birth_date,
                 gmod_code,                      
                 grde_code,                      
                 quality_points,                 
                 v_real_rsts_code;

        EXIT WHEN cnfile_rec%NOTFOUND;

        --v_debug_pidm := v_sfrstcr_pidm;
        --v_debug_pidm := 88188; 
    
        v_id := v_spbpers_ssn;

        IF grde_code LIKE 'W%'
        THEN
            v_course_outcome := 'WITHD';
        END IF;

        IF grde_code = 'PR'
        THEN
            v_course_outcome := 'PROGR';
        END IF;      

        IF grde_code = 'AU'
        THEN
            v_course_outcome := 'AUDIT';
        END IF;

        IF NVL (grde_code, 'NG') = 'NG'
        THEN
            v_course_outcome := 'NGREP';
        END IF;
       
        IF v_course_outcome IS NULL
        THEN
            v_course_outcome := 'GPAPT'; 
        END IF;
        
        IF grde_code IN ('S', 'SC', 'PE')
        THEN
            v_course_outcome := 'SATIS';
        END IF;

        IF grde_code IN ('U', 'NE')
        THEN
            v_course_outcome := 'UNSAT';
        END IF;
        
        IF grde_code = 'I'
        THEN
            v_course_outcome := 'INCOM';
        END IF;
        
        IF v_course_grade IS NULL  -- should be 5 blank spaces if there is no grade
        THEN 
            v_course_grade := '     ';
        END IF;
        
        IF grde_code IN ('A','B','C','D')
        THEN
            v_course_grade := LPAD(TO_CHAR(v_sfrstcr_credit_hr * quality_points * 10), 5, 0);
        END IF;
         
        IF grde_code = 'F'
        THEN
            v_course_outcome := 'GPAPT';
            v_course_grade := '00000';
            v_acad_award := 'N';
        END IF;        
        
        IF grde_code NOT IN ('A','B','C','D')
        THEN 
            v_course_grade := '     ';
        END IF;   
        
            SELECT NVL (MIN (1), 0)
              INTO v_dup_exists
              FROM DUAL
             WHERE v_spriden_last_name LIKE '%DUPLICATE%';

            IF v_dup_exists = 0
            THEN
                v_shrtgpa_hours_earned := 0;

                BEGIN
                    SELECT NVL (SUM (shrtgpa_hours_earned), 0)
                      INTO v_shrtgpa_hours_earned
                      FROM shrtgpa
                     WHERE     shrtgpa_pidm = v_sfrstcr_pidm
                           AND shrtgpa_term_code <= p_term
                           AND shrtgpa_levl_code = 'UG';
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_shrtgpa_hours_earned := 0;
                    WHEN OTHERS
                    THEN
                        p_print_record (
                            'Error while fetching shrtgpa_hours_earned ',
                            v_sfrstcr_pidm);
                END;

                BEGIN
                    SELECT NVL (SUM (shrtckg_credit_hours), 0)
                      INTO v_s_hours
                      FROM shrtckg a
                     WHERE     a.shrtckg_pidm = v_sfrstcr_pidm
                           AND a.shrtckg_term_code = p_term
                           AND a.shrtckg_seq_no =
                               (SELECT MAX (c.shrtckg_seq_no)
                                  FROM shrtckg c
                                 WHERE     c.shrtckg_pidm = v_sfrstcr_pidm
                                       AND c.shrtckg_term_code = p_term
                                       AND c.shrtckg_tckn_seq_no =
                                           a.shrtckg_tckn_seq_no)
                           AND a.shrtckg_grde_code_final = 'S'
                           AND v_sgbstdn_levl_code = 'UG';
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_s_hours := '01';
                    WHEN OTHERS
                    THEN
                        p_print_record (
                            'Error while fetching shrtckg_credit_hours ',
                            v_sfrstcr_pidm);
                END;


                v_course_iden :=
                    RPAD (
                        LTRIM (v_ssbsect_subj_code || v_ssbsect_crse_numb,
                               ' '),
                        12,
                        ' ');
      
      grde_code         := FZ_get_final_grade(p_term, v_sfrstcr_pidm, v_sfrstcr_crn);    
      quality_points     := FZ_get_quality_points(grde_code, v_sgbstdn_levl_code, p_term);
        
      
    -- --------------------------------------------------------------------------
    --      P_Print_AC_courses(p_term, v_sfrstcr_crn, v_sfrstcr_pidm,          --
    --                                    quality_points, quality_points2,     --
    --                                    grde_code, grde_code2, gmod_code,    --
    --                                    v_real_rsts_code);                   --
    --      grde_code         := grde_code2;                                   --
    --      quality_points     := quality_points2;                             --
    -- -----------------------------------------------------------------------        
      IF gmod_code = 'A' THEN
         v_sfrstcr_rsts_code := 'A';
      END IF;
      
      IF gmod_code = 'F' THEN
         v_acad_award := 'N';
      END IF;

      IF v_sfrstcr_rsts_code = 'I' THEN
          IF grde_code = 'P' THEN
              v_acad_award := 'Y';
          ELSE
              IF gmod_code = 'P' THEN -- Pass / Fail (Developmental Courses)
                  IF grde_code = 'S' THEN -- "S" Grade (Satisfactory)
                      v_acad_award := 'Y';
                  ELSE    
                      v_acad_award := 'N';
                    P_Print_No_AC_courses(p_term, v_sfrstcr_crn, v_sfrstcr_pidm, v_spriden_id,
                                    quality_points, grde_code, gmod_code,
                                    v_real_rsts_code);
                  END IF;
              ELSE
                  IF quality_points > 0 THEN
                      v_acad_award := 'Y';
                  ELSE    -- check for Labs, Labs get credit from their corresponding lecture credit
                      BEGIN
                      SELECT NVL(shrgrde_quality_points,0) 
                    INTO lab_points
                    FROM sfrstcr, shrgrde
                    WHERE sfrstcr_pidm = v_sfrstcr_pidm
                    AND sfrstcr_term_code = p_term
                    AND sfrstcr_crn IN ( SELECT ssbsect_crn
                            FROM ssbsect
                         WHERE ssbsect_term_code = sfrstcr_term_code
                         AND ssbsect_subj_code = v_ssbsect_subj_code
                         AND ssbsect_crse_numb = SUBSTR(v_ssbsect_crse_numb,1,3))
                    AND shrgrde_code(+) = sfrstcr_grde_code
                    AND shrgrde_levl_code(+) = sfrstcr_levl_code;        
                    EXCEPTION
                        WHEN no_data_found THEN
                            lab_points := 0;
                        WHEN others THEN
                            lab_points := 0;
                    END;
                      IF lab_points > 0 THEN
                          v_acad_award := 'Y';
                      ELSE    
                          v_acad_award := 'N';
                        P_Print_No_AC_courses(p_term, v_sfrstcr_crn, v_sfrstcr_pidm, v_spriden_id,
                                        quality_points, grde_code, gmod_code,
                                        v_real_rsts_code);
                      END IF;    
                  END IF;    
              END IF;
          END IF;                      
      ELSE
        v_acad_award := 'N';
        P_Print_No_AC_courses(p_term, v_sfrstcr_crn, v_sfrstcr_pidm, v_spriden_id,
                        quality_points, grde_code, gmod_code, v_real_rsts_code);
      END IF;
      
----------------------- End Add ---------------------------------------------
       
      IF v_course_outcome IN ('SATIS','PROGR') THEN
        v_acad_award := 'Y';
      END IF; 
      
      IF v_course_outcome = 'UNSAT' THEN
        v_acad_award := 'N';
      END IF; 
      
      
    -- the hei_cu procedure needs to join to this table to see what has changed  
    INSERT INTO sis_apps.hei_cn_output
    (pidm,spriden_id,term,sfrstcr_crn,campus,student_identifier,course_identifier,section_identifier,
     credit_hours,attempt_credit,academic_award,course_outcome,course_grade,delete_switch,final_grade,date_added)
    VALUES
    --(11111,'T11111111','201840','22222','trra','123456789','LEN1100','003',030,'I','Y','GPAPT','01200','Y', sysdate) -- use this line only if trying to test inserting a record
    (v_sfrstcr_pidm,v_spriden_id,p_term,v_sfrstcr_crn,v_ssbsect_camp_code,v_id,v_course_iden,v_ssbsect_seq_numb,
     v_sfrstcr_credit_hr,v_sfrstcr_rsts_code,v_acad_award,v_course_outcome,v_course_grade,v_delete_switch,grde_code,SYSDATE);
    COMMIT;  
    
      BEGIN                
                
        SELECT 'Y'
        INTO v_rec_present
        FROM zrrsecl
        WHERE zrrsecl_pidm = v_sfrstcr_pidm
          AND zrrsecl_term = p_term
          AND zrrsecl_source = 'SN';
        
        EXCEPTION
        WHEN NO_DATA_FOUND THEN
          v_rec_present := 'N';
            INSERT INTO zrrsecl VALUES(v_sfrstcr_pidm, p_term, v_sgbstdn_levl_code, 'SN',NULL,NULL,NULL,NULL,NULL,NULL);
              v_insert_count := v_insert_count +1;
      
            IF MOD(v_insert_count,100)=0  AND  v_insert_count !=0  THEN
                  COMMIT;
            END IF;
            
        WHEN OTHERS THEN
          p_print_record('Error while fetching record from zrrsecl ', v_sfrstcr_pidm);
    
      END;

--      DBMS_OUTPUT.PUT_LINE('PIDM4: '||v_sfrstcr_pidm);
      IF v_rec_present='Y' THEN
    
        BEGIN

      SELECT NVL(SUM(shrtgpa_hours_earned),0), NVL(SUM(shrtgpa_gpa_hours*100),0), 
               NVL(SUM(shrtgpa_quality_points*100),0)
          INTO v_hours_earned, v_shrtgpa_gpa_hours, v_shrtgpa_quality_points
          FROM shrtgpa
          WHERE shrtgpa_pidm=v_sfrstcr_pidm
            AND shrtgpa_levl_code=v_sgbstdn_levl_code
            AND shrtgpa_gpa_type_ind='I'
            AND shrtgpa_term_code <= p_term;
        
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          v_hours_earned := 0;
          v_shrtgpa_gpa_hours := 0;
          v_shrtgpa_quality_points := 0;
          
          WHEN OTHERS THEN
          p_print_record('Error while fetching record from shrlgpa ', v_sfrstcr_pidm);
          
        END;
        v_stu_rank := v_stu_class;
        
    IF v_sfrstcr_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 02: '      || v_sfrstcr_pidm);
        DBMS_OUTPUT.PUT_LINE('  Rank: '       || v_stu_rank);
        DBMS_OUTPUT.PUT_LINE('  Residency: '  || v_sgbstdn_resd_code);
        DBMS_OUTPUT.PUT_LINE('  Eligibility: '|| v_stu_subsidy);
    END IF;
            
        -----------------------------------------------------------------------------
        -- Major Field of Study                                                    --
        -----------------------------------------------------------------------------
        BEGIN
      
          SELECT NVL(stvmajr_cipc_code,'UNDECI')
          INTO v_stvmajr_cipc_code
          FROM stvmajr
          WHERE stvmajr_code = NVL(v_sgbstdn_majr_code_1,'UNDE');
        
          EXCEPTION
          WHEN NO_DATA_FOUND THEN
          DBMS_OUTPUT.PUT_LINE('Error in Major field of study ' || SQLERRM(SQLCODE) || ' '||v_sfrstcr_pidm
                                  ||' '||v_id||' '||NVL(v_sgbstdn_majr_code_1,'Null'));

          WHEN OTHERS THEN
          p_print_record('Error while fetching stvmajr_cipc_code ', v_sfrstcr_pidm);
       
        END;

        -----------------------------------------------------------------------------
        -- Calculate Cumulative Credit Hours Earned : shrtgpa_hours + shrtrce_hours
        -----------------------------------------------------------------------------
     BEGIN
        SELECT NVL(SUM(shrtgpa_hours_earned*100),0)
        INTO v_cum_shrtgpa_hours
        FROM shrtgpa
        WHERE shrtgpa_pidm=v_sfrstcr_pidm
            AND shrtgpa_levl_code=v_sgbstdn_levl_code
            AND shrtgpa_gpa_type_ind='I';
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
          v_cum_shrtgpa_hours := 0;
     END;
     
        -----------------------------------------------------------------------------
        -- Get shrtrce_hours  (Transfer Credit hours) :  v_cum_shrtrce_hours       --
        -----------------------------------------------------------------------------
     BEGIN   
        SELECT NVL(SUM(shrtrce_credit_hours*100),0)
        INTO v_cum_shrtrce_hours
        FROM shrtrce
        WHERE shrtrce_pidm = v_sfrstcr_pidm;
        
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
          v_cum_shrtrce_hours := 0;
     END;
     
     v_cum_credit_hrs := v_cum_shrtgpa_hours + v_cum_shrtrce_hours;
     v_cum_credit_hours := LPAD(TO_CHAR(v_cum_credit_hrs),5,0); 
 
        ---------------- End Cumulative Credit Hours Earned -------------------------
                            
        -----------------------------------------------------------------------------
        -- Living Arrangements                                                     --
        -----------------------------------------------------------------------------
     v_liv_arr:='D';
     BEGIN
    
            SELECT 'L' 
            INTO v_liv_arr
            FROM slrrasg
            WHERE slrrasg_pidm = v_sfrstcr_pidm
              AND slrrasg_term_code = p_term
              AND slrrasg_ascd_code = 'AC';

          EXCEPTION
          WHEN NO_DATA_FOUND THEN
              v_liv_arr := 'D';
          WHEN OTHERS THEN
              p_print_record('Error while fetching record from spraddr and sobptrm ', v_sfrstcr_pidm);

        END;
        
        -----------------------------------------------------------------------------
        -- Student Subsidy Eligibility Status                                      --
        -----------------------------------------------------------------------------
        BEGIN
            IF v_sgbstdn_resd_code='N' AND v_sgbstdn_levl_code='UG' THEN
              v_stu_subsidy := 'IR';
            ELSE
              BEGIN
                IF v_spbpers_sex='F' THEN
                   v_stu_subsidy := 'EL';
                ELSE                
                  SELECT 'EL'
                  INTO v_stu_subsidy
                  FROM sgrsatt
                  WHERE sgrsatt_pidm = v_sfrstcr_pidm 
                    AND sgrsatt_term_code_eff <= p_term
                    AND ROWNUM=1
                    AND sgrsatt_atts_code = 'SYES';
                END IF;
                  
                EXCEPTION  
                 WHEN NO_DATA_FOUND THEN
                  BEGIN
        
                  IF v_spbpers_birth_date >= v_18_dob AND 
                    v_spbpers_birth_date <= v_26_dob THEN
                    v_stu_subsidy := 'IS';
                  ELSE
                    v_stu_subsidy := 'EL';
                  END IF;
                  
                  END;
                WHEN OTHERS THEN
                p_print_record('Error while fetching record from sgrsatt ', v_sfrstcr_pidm);
              END;
            
            END IF;
          END;    
      
      END IF;   
      
                                 
     v_dprog := FZ_get_academic_program_code(v_sfrstcr_pidm); 

    IF v_sfrstcr_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 04: '      || v_sfrstcr_pidm);
    END IF;


    IF v_dprog = 'UNDECI' THEN
      v_stvmajr_cipc_code := 'UNDECI';
    END IF;
    
    IF SUBSTR(v_dprog,1,5) = 'RHODE' THEN
      v_dprog := 'UNDECIDED_AH';
      v_stvmajr_cipc_code := '519999';
    END IF;
      
    IF v_dprog IS NULL THEN
      v_dprog := 'UNDECIDED_AS';
      v_stvmajr_cipc_code := '240102';
    END IF;

    IF v_sfrstcr_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 05: '      || v_sfrstcr_pidm);
    END IF;              
    
    --DBMS_OUTPUT.PUT_LINE('CCP problem values: ' || v_sfrstcr_pidm || ', ' || p_term);
    
    BEGIN
      v_ccp := FZ_get_ccp(v_sfrstcr_pidm, p_term);
      IF NVL(v_ccp,'?') <> '?' THEN
        v_special_status := v_ccp;
      ELSE v_special_status := 'N';
      END IF;
    EXCEPTION
    WHEN OTHERS THEN
        ERROR_FOUND := TRUE;
    END;
      

 
    IF v_sfrstcr_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 06: '      || v_sfrstcr_pidm);
        DBMS_OUTPUT.PUT_LINE('  Special Status: '       || v_special_status);
    END IF;
    


--    DBMS_OUTPUT.PUT_LINE('PIDM: '||v_sfrstcr_pidm||'  PSEO Code: '||v_pseo);

    IF v_sgbstdn_resd_code NOT IN ('E','R','N','X','B') THEN    
        p_print_record('sgbstdn_resd_code NOT  ', v_sfrstcr_pidm);

    ELSIF v_sgbstdn_styp_code IN ('A','B') AND 
          ((NVL(v_sfrstcr_pidm_old, v_sfrstcr_pidm) = v_sfrstcr_pidm AND
           NVL(v_ssbsect_camp_code_old, v_ssbsect_camp_code) != v_ssbsect_camp_code)
           OR NVL(v_sfrstcr_pidm_old,'0') != v_sfrstcr_pidm) THEN
      
        IF ERROR_FOUND <> TRUE THEN
            INSERT INTO sis_apps.hei_sn_output
            (ssbsect_camp_code,ID,stu_rank,sgbstdn_resd_code,special_status,stu_subsidy,shrtgpa_gpa_hours,shrtgpa_quality_points,cum_credit_hours,dprog,
             stvmajr_cipc_code,liv_arr,incarcerated,delete_switch,date_added)
            VALUES
            (v_ssbsect_camp_code,v_id,v_stu_rank,v_sgbstdn_resd_code,v_special_status,v_stu_subsidy,v_shrtgpa_gpa_hours,v_shrtgpa_quality_points,v_cum_credit_hours,v_dprog,
             v_stvmajr_cipc_code,v_liv_arr,v_incarcerated,v_delete_switch,SYSDATE);

            COMMIT;     
        END IF;
    
    ELSIF ((NVL(v_sfrstcr_pidm_old, v_sfrstcr_pidm) = v_sfrstcr_pidm AND
            NVL(v_ssbsect_camp_code_old, v_ssbsect_camp_code) != v_ssbsect_camp_code)
            OR NVL(v_sfrstcr_pidm_old,'0') != v_sfrstcr_pidm) THEN
   
        IF ERROR_FOUND <> TRUE THEN
            INSERT INTO sis_apps.hei_sn_output
            (ssbsect_camp_code,ID,stu_rank,sgbstdn_resd_code,special_status,stu_subsidy,shrtgpa_gpa_hours,
             shrtgpa_quality_points,cum_credit_hours,dprog,stvmajr_cipc_code,liv_arr,incarcerated,delete_switch,date_added)
            VALUES
            (v_ssbsect_camp_code,v_id,v_stu_rank,v_sgbstdn_resd_code,v_special_status,v_stu_subsidy,v_shrtgpa_gpa_hours,
             v_shrtgpa_quality_points,v_cum_credit_hours,v_dprog,v_stvmajr_cipc_code,v_liv_arr,v_incarcerated,v_delete_switch,SYSDATE);
         
            COMMIT; 
        END IF;        
    END IF;   
  
    -- IF v_rec_present='N' THEN
    
    
      v_sfrstcr_pidm_old     :=     v_sfrstcr_pidm;
      v_ssbsect_camp_code_old     :=     v_ssbsect_camp_code;
      
    ELSE
  
      p_print_record('DUPLICATE PIDM FOUND ', v_sfrstcr_pidm);
    
    END IF;      --IF v_dup_exists=0 THEN
    
    IF v_sfrstcr_pidm = v_debug_pidm THEN
        DBMS_OUTPUT.PUT_LINE('Step 07: '      || v_sfrstcr_pidm);
    END IF;
  
  END LOOP; 
  
  
  DBMS_OUTPUT.PUT_LINE('DONE INSERTING RECORDS');
  
  SELECT COUNT(*) INTO v_totrec_cn FROM sis_apps.hei_cn_output WHERE term = p_term; 
  SELECT COUNT(*) INTO v_totrec_sn FROM sis_apps.hei_sn_output; 
  
  DBMS_OUTPUT.PUT_LINE('CN COUNT = ' || V_TOTREC_CN);  
  DBMS_OUTPUT.PUT_LINE('SN COUNT = ' || V_TOTREC_SN);  
  
    v_sess := SUBSTR (p_term, LENGTH (p_term) - 1, 2);
    
    v_year := SUBSTR (p_term, 1, LENGTH (p_term) - 2);


    IF v_sess = '30'
    THEN
        v_sess := 'SM';
    ELSIF v_sess = '40'
    THEN
        v_sess := 'AU';
    ELSIF v_sess = '10'
    THEN
        v_sess := 'SP';
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('TRRACN'||v_year||v_sess||LPAD(v_totrec_cn,6,0));
    DBMS_OUTPUT.PUT_LINE('TRRASN'||v_year||v_sess||LPAD(v_totrec_sn,6,0));
    

    UTL_FILE.PUT_LINE (
        FILE_HANDLE_CN,
        'TRRACN' || v_year || v_sess || LPAD (v_totrec_cn, 6, 0) ||CHR(13));
     
    UTL_FILE.PUT_LINE (
        FILE_HANDLE_SN,
        'TRRASN' || v_year || v_sess || LPAD (v_totrec_sn, 6, 0) ||CHR(13));
        
    
        
        
    -- creating the cn output file    
    FOR rec IN (
                SELECT campus,
                       RPAD(student_identifier, 9, ' ') AS student_identifier,
                       RPAD(course_identifier, 12, ' ') AS course_identifier,
                       RPAD(section_identifier, 6, ' ') AS section_identifier,
                       LPAD(credit_hours, 3, 0) AS credit_hours,
                       attempt_credit,
                       academic_award,
                       RPAD(course_outcome, 5, ' ') AS course_outcome,
                       RPAD(course_grade, 5, ' ') AS course_grade,
                       delete_switch 
                FROM sis_apps.hei_cn_output
                WHERE term = p_term  -- ensures only records for the current term are sent to the DLA
               )
    LOOP
    UTL_FILE.PUT_LINE(FILE_HANDLE_CN, rec.campus||rec.student_identifier||rec.course_identifier||rec.section_identifier||
                      rec.credit_hours||rec.attempt_credit||rec.academic_award||rec.course_outcome||rec.course_grade||rec.delete_switch||CHR(13),TRUE); 
              
    END LOOP; 


    -- creating the sn output file    
    FOR rec IN (
                SELECT ssbsect_camp_code,
                       RPAD(ID, 9, ' ') AS ID,
                       stu_rank,
                       sgbstdn_resd_code,
                       special_status,
                       RPAD(stu_subsidy, 2, ' ') AS stu_subsidy,
                       LPAD(shrtgpa_gpa_hours, 5, 0) AS shrtgpa_gpa_hours,
                       LPAD(shrtgpa_quality_points, 6, 0) AS shrtgpa_quality_points,
                       LPAD(cum_credit_hours, 5, 0) AS cum_credit_hours,
                       RPAD(dprog, 15, ' ') AS dprog,
                       LPAD(stvmajr_cipc_code, 6, ' ') AS stvmajr_cipc_code,
                       liv_arr,
                       incarcerated,
                       delete_switch 
                FROM sis_apps.hei_sn_output
               )
     
    LOOP
    UTL_FILE.PUT_LINE(FILE_HANDLE_SN, rec.ssbsect_camp_code||rec.id||rec.stu_rank||rec.sgbstdn_resd_code||
                      rec.special_status||rec.stu_subsidy||rec.shrtgpa_gpa_hours||rec.shrtgpa_quality_points||rec.cum_credit_hours||rec.dprog||
                      rec.stvmajr_cipc_code||rec.liv_arr||rec.incarcerated||rec.delete_switch||CHR(13),TRUE); 
              
    END LOOP; 

            
  COMMIT;
  CLOSE cnfile_rec;
  UTL_FILE.FCLOSE(FILE_HANDLE_CN);
  UTL_FILE.FCLOSE(FILE_HANDLE_SN);
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  UTL_FILE.FCLOSE(GRADES_HANDLE);
  DBMS_OUTPUT.PUT_LINE('**End Procedure CNSN**');   
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');
 
    WHEN OTHERS THEN  ------ Can I get it to tell me the field?
      DBMS_OUTPUT.PUT_LINE('Error here before program terminated.  PIDM: '||v_sfrstcr_pidm||'.  ' || SQLERRM(SQLCODE));
      DBMS_OUTPUT.PUT_LINE('Program Terminated.');
      UTL_FILE.FCLOSE_ALL; 
 

END PZ_CREATE_HEI_CNSN;



PROCEDURE PZ_CREATE_HEI_CI(p_term IN VARCHAR2) IS
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_CI.

        TABLES: 
        
        INPUT: Term
     
==============================================================================*/ 
no_param_exception        EXCEPTION;

v_totrec                  NUMBER;
v_sess                    VARCHAR2(5);
v_year                    VARCHAR2(8);
v_rec_withzero            NUMBER;
v_scbcrky_subj_code       VARCHAR2(4);
v_scbcrky_crse_numb       VARCHAR2(5);
v_scbcrse_cipc_code       VARCHAR2(6);
v_scbcrse_title           VARCHAR2(30);
v_scbcrse_credit_hr_low   NUMBER;
v_scbcrse_credit_hr_high  NUMBER;
v_scbsupp_cuda_code       VARCHAR2(15);
v_scbcrse_crse_numb       VARCHAR2(15);
v_valid_numb              VARCHAR2(1)    := 'N';

ws_first_rec              BOOLEAN     := TRUE;


v_elig                    VARCHAR2(1)     := 'Y';
v_course_iden             VARCHAR2(15);
v_subj_code               VARCHAR2(10);
v_course_titl             VARCHAR2(30);
v_low_credit              VARCHAR2(5);
v_high_credit             VARCHAR2(5);
             
utl_file_dir              VARCHAR2(100);

FILE_HANDLE               UTL_FILE.FILE_TYPE;

ERROR_HANDLE              UTL_FILE.FILE_TYPE;

CURSOR cifile_rec(v_term VARCHAR2) IS
SELECT a.scbcrky_subj_code, a.scbcrky_crse_numb,
       b.scbcrse_cipc_code, b.scbcrse_title, 
       ROUND(NVL(b.scbcrse_credit_hr_low,0),1)*10,
       ROUND(NVL(b.scbcrse_credit_hr_high,b.scbcrse_credit_hr_low),1)*10,
       c.scbsupp_cuda_code,
       b.scbcrse_crse_numb
FROM scbcrky a, scbcrse b, scbsupp c
WHERE a.scbcrky_term_code_start <= v_term
AND a.scbcrky_term_code_end >= v_term 
AND a.scbcrky_subj_code = b.scbcrse_subj_code
AND a.scbcrky_crse_numb = b.scbcrse_crse_numb
AND b.scbcrse_csta_code IN ('A','T')    -- Added T by Taryn 03/25/2003
AND b.scbcrse_eff_term = (SELECT MAX(d.scbcrse_eff_term)
                FROM scbcrse d
                      WHERE d.scbcrse_eff_term <= v_term
                        AND d.scbcrse_subj_code = b.scbcrse_subj_code
                                AND d.scbcrse_crse_numb = b.scbcrse_crse_numb)
AND b.scbcrse_crse_numb <> '199'
AND a.scbcrky_subj_code = c.scbsupp_subj_code
AND a.scbcrky_crse_numb = c.scbsupp_crse_numb
AND c.scbsupp_eff_term = (SELECT MAX(e.scbsupp_eff_term)
                FROM scbsupp e
                      WHERE e.scbsupp_eff_term <= v_term
                        AND e.scbsupp_subj_code = c.scbsupp_subj_code
                               AND e.scbsupp_crse_numb = c.scbsupp_crse_numb)
AND NOT EXISTS (SELECT scrgmod_subj_code,scrgmod_crse_numb FROM scrgmod WHERE scrgmod_gmod_code = 'T' AND scrgmod_default_ind='D' AND scrgmod_subj_code=b.scbcrse_subj_code AND scrgmod_crse_numb=b.scbcrse_crse_numb)                               
ORDER BY a.scbcrky_subj_code, a.scbcrky_crse_numb;


/* Added Taryn 03/23/2003 Cursor to compare CN and CI file. Subselect should match the select in CI, Please check */
CURSOR cn_ci_comp(v_term VARCHAR2) IS
SELECT DISTINCT e.ssbsect_subj_code,e.ssbsect_crse_numb
FROM sfrstcr a, sobptrm b, sgbstdn c, ssbsect e, shrgrde
WHERE a.sfrstcr_term_code = v_term
  AND e.ssbsect_subj_code NOT LIKE 'FOC'
  AND b.sobptrm_term_code = a.sfrstcr_term_code
  AND b.sobptrm_ptrm_code = a.sfrstcr_ptrm_code
  AND c.sgbstdn_pidm = a.sfrstcr_pidm
  AND c.sgbstdn_term_code_eff = (SELECT MAX(f.sgbstdn_term_code_eff)
                       FROM sgbstdn f
                       WHERE f.sgbstdn_pidm = c.sgbstdn_pidm
                         AND f.sgbstdn_term_code_eff <= v_term)
  AND e.ssbsect_term_code = a.sfrstcr_term_code
  AND e.ssbsect_crn = a.sfrstcr_crn
  AND TO_CHAR(a.sfrstcr_add_date,'YYYYMMDD') <= TO_CHAR(b.sobptrm_census_date, 'YYYYMMDD')
  AND ((a.sfrstcr_rsts_code IN ('RE','RW', 'AU')) OR
      (a.sfrstcr_rsts_code NOT IN ('RE','RW', 'AU') AND
     TO_CHAR(a.sfrstcr_rsts_date,'YYYYMMDD') > TO_CHAR(b.sobptrm_census_date,'YYYYMMDD')))
  AND shrgrde_code(+) = a.sfrstcr_grde_code
  AND shrgrde_levl_code(+) = a.sfrstcr_levl_code
AND NOT EXISTS 
(SELECT 'Y'
FROM scbcrky a, scbcrse b, scbsupp c
WHERE a.scbcrky_subj_code = e.ssbsect_subj_code
AND a.scbcrky_crse_numb = e.ssbsect_crse_numb
AND a.scbcrky_term_code_start <= v_term
AND a.scbcrky_term_code_end >= v_term 
AND a.scbcrky_subj_code = b.scbcrse_subj_code
AND a.scbcrky_crse_numb = b.scbcrse_crse_numb
AND b.scbcrse_csta_code IN ('A','T')    
AND b.scbcrse_eff_term = (SELECT MAX(d.scbcrse_eff_term)
                FROM scbcrse d
                      WHERE d.scbcrse_eff_term <= v_term
                        AND d.scbcrse_subj_code = b.scbcrse_subj_code
                                AND d.scbcrse_crse_numb = b.scbcrse_crse_numb)
AND a.scbcrky_subj_code = c.scbsupp_subj_code
AND a.scbcrky_crse_numb = c.scbsupp_crse_numb
AND c.scbsupp_eff_term = (SELECT MAX(e.scbsupp_eff_term)
                FROM scbsupp e
                      WHERE e.scbsupp_eff_term <= v_term
                        AND e.scbsupp_subj_code = c.scbsupp_subj_code
                               AND e.scbsupp_crse_numb = c.scbsupp_crse_numb))
ORDER BY 1,2;


------------------------------------
-- Begin Procedure Declarations --
------------------------------------

-----------------------------------------------------------------------------
-- Procedure: P_Print_Error
-- Prints the record with the error message passed in as a parameter
-----------------------------------------------------------------------------

PROCEDURE P_PRINT_record(messageIn VARCHAR2) IS
    ws_pline        VARCHAR2(250);
    ws_id           VARCHAR2(9);
    ws_name         VARCHAR2(32);
    ws_run          VARCHAR2(20);

BEGIN

  IF ws_first_rec THEN
    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
    INTO ws_run
    FROM dual;
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                 TRRA; Fremont, Ohio');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: ZRRCRCI            Errors found while generating OBOR CI File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Course Identifier                  Message');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------------------               ------------------------------');
  END IF;

  ws_first_rec := FALSE;
   
  UTL_FILE.PUT_LINE(ERROR_HANDLE,messageIn);

END P_PRINT_record;

-----------------------------------------------------------------------------
    
/****************************************************/
/******************** Main Program ********************/
/****************************************************/

BEGIN

-------------------------------------------------------------
  DBMS_OUTPUT.PUT_LINE('**Begin Procedure CI**');    
  utl_file_dir := 'STU_OUT';
  FILE_HANDLE  := UTL_FILE.FOPEN(utl_file_dir,'CI_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'zrrcrci_errors.lis','w');    
    
-------------------------------------------------------------

  SELECT COUNT(1)
  INTO v_totrec
  FROM scbcrky a, scbcrse b, scbsupp c
  WHERE a.scbcrky_term_code_start <= p_term
    AND a.scbcrky_term_code_end >= p_term 
    AND a.scbcrky_subj_code = b.scbcrse_subj_code
    AND a.scbcrky_crse_numb = b.scbcrse_crse_numb
    AND b.scbcrse_csta_code IN ('A','T') 
    AND b.scbcrse_cipc_code IS NOT NULL
    AND b.scbcrse_eff_term = (SELECT MAX(d.scbcrse_eff_term)
                    FROM scbcrse d
                        WHERE d.scbcrse_eff_term <= p_term
                          AND d.scbcrse_subj_code = b.scbcrse_subj_code
                                  AND d.scbcrse_crse_numb = b.scbcrse_crse_numb)
    AND b.scbcrse_crse_numb <> '199'
    AND a.scbcrky_subj_code = c.scbsupp_subj_code
    AND a.scbcrky_crse_numb = c.scbsupp_crse_numb
    AND c.scbsupp_eff_term = (SELECT MAX(e.scbsupp_eff_term)
                  FROM scbsupp e
                        WHERE e.scbsupp_eff_term <= p_term
                          AND e.scbsupp_subj_code = c.scbsupp_subj_code
                                 AND e.scbsupp_crse_numb = c.scbsupp_crse_numb)
    AND NOT EXISTS (SELECT scrgmod_subj_code,scrgmod_crse_numb FROM scrgmod WHERE scrgmod_gmod_code = 'T' AND scrgmod_default_ind='D' AND scrgmod_subj_code=b.scbcrse_subj_code AND scrgmod_crse_numb=b.scbcrse_crse_numb);



  v_sess := SUBSTR(p_term, LENGTH(p_term) - 1,2);
  v_year := SUBSTR(p_term,1, LENGTH(p_term) - 2);
 
  IF v_sess = '30' THEN
    v_sess := 'SM';
  ELSIF v_sess = '40' THEN
    v_sess := 'AU';
  ELSIF v_sess = '10' THEN
    v_sess := 'SP';
  END IF;
  
  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRACI'||v_year||v_sess||LPAD(v_totrec,6,0));
  
  OPEN cifile_rec(p_term);
  
  LOOP
  
    FETCH cifile_rec 
    INTO v_scbcrky_subj_code, v_scbcrky_crse_numb,
         v_scbcrse_cipc_code, v_scbcrse_title, 
         v_scbcrse_credit_hr_low, v_scbcrse_credit_hr_high,
         v_scbsupp_cuda_code, v_scbcrse_crse_numb;
       
    EXIT WHEN cifile_rec%NOTFOUND;

    v_subj_code      := RPAD(v_scbcrse_cipc_code,6,' ');
    v_course_titl := RPAD(v_scbcrse_title,25,' ');
    v_low_credit  := LPAD(v_scbcrse_credit_hr_low,3,'0');
    v_high_credit := LPAD(v_scbcrse_credit_hr_high,3,'0');
    
    BEGIN
       SELECT 'Y' 
       INTO v_valid_numb
       FROM dual
       WHERE ASCII(SUBSTR(v_scbcrse_crse_numb,1,1)) BETWEEN 48 AND 57;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        v_valid_numb := 'N';
      WHEN OTHERS THEN
        p_print_record('Error: checking Course Number');
    END;
       
   
    
    IF v_valid_numb = 'N' THEN
        v_scbcrse_crse_numb := SUBSTR(v_scbcrse_crse_numb,2,LENGTH(v_scbcrse_crse_numb)-1);
    END IF;
    v_valid_numb := 'N';

    -- ------------------------------------------------------------------
    -- Added Begin-End Block and Exception Handling 
    ---------------------------------------------------------------------
    BEGIN
       
    IF v_scbcrky_subj_code||v_scbcrky_crse_numb NOT IN ('ACC090','CIS090','OAS090') 
        AND TO_NUMBER(SUBSTR(v_scbcrse_crse_numb,1,3)) < 100 THEN
      v_scbsupp_cuda_code := 'V';
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN
            v_scbsupp_cuda_code := 'V';
    END;
    ----------------------------------------------------------------------
          
    IF v_scbcrse_cipc_code IS NULL THEN
      
      p_print_record(v_scbcrky_subj_code||v_scbcrky_crse_numb||'                            NULL Subject Code.');
      
    ELSIF v_scbsupp_cuda_code = '00' THEN
      v_course_iden := RPAD(v_scbcrky_subj_code||v_scbcrky_crse_numb,12,' ');
      UTL_FILE.PUT_LINE(FILE_HANDLE,v_course_iden||v_subj_code||'D'||v_course_titl||v_low_credit||v_high_credit||v_elig||'N');
    ELSE
      v_course_iden := RPAD(v_scbcrky_subj_code||v_scbcrky_crse_numb,12,' ');
      UTL_FILE.PUT_LINE(FILE_HANDLE,v_course_iden||v_subj_code||v_scbsupp_cuda_code||v_course_titl||v_low_credit||v_high_credit||v_elig||'N');
    END IF;
  
    
    
    IF v_scbsupp_cuda_code NOT IN ('G','T','B','M','D','V','00') THEN
    
      p_print_record(v_course_iden||'                         Invalid Course Level : '||v_scbsupp_cuda_code);
      
    END IF;
  
  END LOOP;  
      
  CLOSE cifile_rec;
  UTL_FILE.FCLOSE(FILE_HANDLE);
  
    /* Added Taryn 03/23/2003 Will display all courses in CN file and not in CI file */
  UTL_FILE.PUT_LINE(ERROR_HANDLE,' ');
  UTL_FILE.PUT_LINE(ERROR_HANDLE,'Course in CN file but not in CI file:');
  OPEN cn_ci_comp(p_term);
  LOOP
  EXIT WHEN cn_ci_comp%NOTFOUND;
  v_scbcrky_subj_code:=' ';
  v_scbcrky_crse_numb:= ' ';

  FETCH cn_ci_comp INTO v_scbcrky_subj_code, v_scbcrky_crse_numb;
      UTL_FILE.PUT_LINE(ERROR_HANDLE,v_scbcrky_subj_code || ' ' ||v_scbcrky_crse_numb);
  END LOOP;
  CLOSE cn_ci_comp;
  UTL_FILE.PUT_LINE(ERROR_HANDLE,'End CN - CI comparison');
  /* End Add Taryn */

  
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  DBMS_OUTPUT.PUT_LINE('**End Procedure CI**');   
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE_ALL;    

END PZ_CREATE_HEI_CI;


PROCEDURE PZ_CREATE_HEI_ST(p_term IN VARCHAR2) IS
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_ST.

        TABLES: SIRASGN - SELECT
                ZRBCNHD - SELECT
                NBRJOBS - SELECT
                SPBPERS - SELECT
                SSBSECT - SELECT
                SPRIDEN - SELECT
                FTVPROG - SELECT
==============================================================================*/ 
v_pidm                        NUMBER(8);
v_campus                    VARCHAR2(3);
v_camp                        VARCHAR2(4);
v_spriden_id                VARCHAR2(9);
v_spriden_last_name            VARCHAR2(60);
v_id_switch                    VARCHAR2(1);
v_course_id                    VARCHAR2(12);
v_subj_code                    VARCHAR2(4);
v_crse_numb                    VARCHAR2(5);
v_seq_numb                    VARCHAR2(6);
v_fund_unit                    VARCHAR2(35);
v_schd_code                    VARCHAR2(2);
v_schd_string                VARCHAR2(22);
v_technology                VARCHAR2(14)    := 'NA            ';
v_delete                    VARCHAR2(1)        := 'N';
v_course_subj                VARCHAR2(4);
v_dlev                        VARCHAR2(2);
v_insm_code                   VARCHAR(5);


v_totrec                    NUMBER;
v_sess                        VARCHAR2(5);
v_year                        VARCHAR2(8);
v_insert_count                NUMBER              DEFAULT 0;
v_no_pebempl                NUMBER;
v_no_pebempl_count            VARCHAR2(2);
v_skip                        VARCHAR2(1);
v_paid_employee             VARCHAR2(1);
v_term_start                DATE;

utl_file_dir                VARCHAR2(100);
ws_first_rec                BOOLEAN := TRUE;


v_dup_exists                NUMBER;
no_param_exception            EXCEPTION;

FILE_HANDLE                    UTL_FILE.FILE_TYPE;
ERROR_HANDLE                UTL_FILE.FILE_TYPE;

emp_messg                    VARCHAR2(1000);       
counter                        NUMBER(5);        

-------------------------------------------------------------------------------
-- Begin CURSOR Declarations                                                 --
-------------------------------------------------------------------------------
CURSOR stfile_rec(v_term VARCHAR2) IS
SELECT DISTINCT DECODE(ssbsect_camp_code,'M','TRRA','OC','TRRA','TRRA'),
       sirasgn_pidm,
       spbpers_ssn,
       RPAD(zrbcnhd_course,12,' '),
       RPAD(zrbcnhd_section,6,' '),
       spriden_last_name, ssbsect_subj_code, ssbsect_crse_numb, ssbsect_camp_code,SSBSECT_INSM_CODE
FROM ssbsect, spriden, sirasgn, zrbcnhd,spbpers
WHERE ssbsect_term_code = v_term
  AND sirasgn_crn = ssbsect_crn
  AND sirasgn_term_code = ssbsect_term_code
  AND ssbsect_crn = zrbcnhd_crn
  AND ssbsect_term_code = zrbcnhd_term
  AND sirasgn_pidm = spriden_pidm
  AND spriden_change_ind IS NULL
  AND ssbsect_subj_code != 'FOC'
  AND sirasgn_pidm = spbpers_pidm;
-------------------------------------------------------------------------------
CURSOR schd_rec(v_campusIn VARCHAR2, v_subjIn VARCHAR2, v_crseIn VARCHAR2) IS
SELECT DISTINCT RPAD(DECODE(ssbsect_schd_code,'IND','IS','AC','OT',ssbsect_schd_code),2,' ')
FROM ssbsect
WHERE ssbsect_camp_code = v_campusIn
  AND ssbsect_subj_code = v_subjIn
  AND ssbsect_crse_numb = v_crseIn;
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Begin Procedure Declarations                                            --
-----------------------------------------------------------------------------

-----------------------------------------------------------------------------
-- Procedure: P_Print_Error                                                --
-- Prints the record with the error message passed in as a parameter       --
-----------------------------------------------------------------------------
PROCEDURE P_PRINT_record(messageIn VARCHAR2, pidmIn NUMBER) IS
    ws_pline        VARCHAR2(250);
    ws_id           VARCHAR2(9);
    ws_name         VARCHAR2(32);
    ws_run            VARCHAR2(20);
    ws_ssn          VARCHAR2(9);      
BEGIN

  IF ws_first_rec THEN
    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
    INTO ws_run
    FROM dual;
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                       TRRA; Fremont, OHIO');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: ZRRCRST                      Errors found while generating OBOR ST File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'SSN       ID        Name                               Message'); 
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------- --------  --------------------------------   ------------------------------'); 
  END IF;

  ws_first_rec := FALSE;
  
  -----------------------------------------------------------------------------
  -- Modified Taryn to get SSN too                                           --
  -----------------------------------------------------------------------------
  BEGIN
    SELECT spriden_id, RPAD(SUBSTR(spriden_last_name||', '||spriden_first_name||' '||spriden_mi,1,32),32,' '), spbpers_ssn
    INTO ws_id, ws_name, ws_ssn
    FROM spriden,spbpers
    WHERE spriden_pidm = pidmIn
      AND spriden_change_ind IS NULL
      AND spriden_pidm = spbpers_pidm;
    EXCEPTION
      WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error in here'); 
        ws_name :='Error reading SPRIDEN for pidm= ' || pidmIn;
        ws_id := '????????';
  END;
    
  ws_pline := ws_ssn || ' ' || ws_id ||'  '|| ws_name || '   ' ||messageIn;
  --------------------------- End Taryn Modify ------------------------------
  
  UTL_FILE.PUT_LINE(ERROR_HANDLE,ws_pline);

END P_PRINT_record;
-----------------------------------------------------------------------------

/****************************************************************************/
/***************************** Main Program *********************************/
/****************************************************************************/
BEGIN
-----------------------------------------------------------------------------
  DBMS_OUTPUT.PUT_LINE('**Begin Procedure ST**');   
  utl_file_dir := 'STU_OUT';
  FILE_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'ST_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'zrrcrst_errors.lis','w');    
---------------------------------------------------------------
  
 -- Make sure table has no records for the Term ..
    DELETE FROM zrbcnhd
    WHERE zrbcnhd_term=p_term;
    
-- Insert all course-sections that end by the term end date ..
    ---   (The other course-sections will be reported the next term) ..
    INSERT INTO zrbcnhd
    SELECT DISTINCT ssbsect_term_code,
       ssbsect_crn,
       ssbsect_subj_code||ssbsect_crse_numb,
       ssbsect_seq_numb      
    FROM ssbsect,stvterm,ssrmeet
    WHERE ssbsect_term_code=p_term
    AND ssbsect_term_code=stvterm_code
    AND ssbsect_crn=ssrmeet_crn
    AND ssbsect_term_code=ssrmeet_term_code
    AND ssrmeet_end_date<=stvterm_end_date
    AND ssbsect_enrl>0;


  SELECT COUNT(DISTINCT DECODE(ssbsect_camp_code,'M','TRRA','OC','TRRA','TRRA')||sirasgn_pidm||
    spriden_id||RPAD(LTRIM(zrbcnhd_course,' '),12,' ')||RPAD(LTRIM(ssbsect_seq_numb,' '),6,' ')||
    spriden_last_name||ssbsect_subj_code||ssbsect_crse_numb||ssbsect_camp_code||SSBSECT_INSM_CODE)
  INTO v_totrec
  FROM ssbsect, spriden, sirasgn, zrbcnhd
  WHERE ssbsect_term_code = p_term
  AND sirasgn_crn = ssbsect_crn
  AND sirasgn_term_code = ssbsect_term_code
  AND ssbsect_crn = zrbcnhd_crn
  AND ssbsect_term_code = zrbcnhd_term
  AND sirasgn_pidm = spriden_pidm
  AND ssbsect_subj_code != 'FOC'
  AND spriden_change_ind IS NULL;
  
  v_sess := SUBSTR(p_term, LENGTH(p_term) - 1,2);
   
   v_year := SUBSTR(p_term,1, LENGTH(p_term) - 2);
 
  IF v_sess = '30' THEN
    v_sess := 'SM';
  ELSIF v_sess = '40' THEN
    v_sess := 'AU';
  ELSIF v_sess = '10' THEN
    v_sess := 'SP';
  END IF;
  
  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRAST'||v_year||v_sess||LPAD(v_totrec,6,0));
  
  SELECT stvterm_start_date
  INTO v_term_start
  FROM stvterm
  WHERE stvterm_code=p_term;

  OPEN stfile_rec(p_term); 
  LOOP
       v_schd_string := '';
     v_id_switch := 'N';
    FETCH stfile_rec 
    INTO v_camp, v_pidm, v_spriden_id, v_course_id, v_seq_numb,
         v_spriden_last_name, v_subj_code, v_crse_numb, v_campus, v_insm_code;

     EXIT WHEN stfile_rec%NOTFOUND;
     
     -----------------------------------------------------------------------------
     -- Revise ID for Non-Paid faculty                                  --
     -----------------------------------------------------------------------------
     v_paid_employee :='';

     BEGIN
       SELECT DISTINCT 'Y' 
       INTO v_paid_employee
       FROM PHREARN
       WHERE PHREARN_ACTIVITY_DATE>=v_term_start
       AND PHREARN_PIDM=v_pidm;
     EXCEPTION
       WHEN NO_DATA_FOUND THEN
         v_spriden_id := 'AGENCY   ';
         v_id_switch := 'Y';
       WHEN OTHERS THEN
         p_print_record('Pd Employee:',v_pidm);
         p_print_record(SQLERRM(SQLCODE), v_pidm);
     END;
     
     -----------------------------------------------------------------------------
     -- Replace Tom Wylie's SSN with 'AGENCY' for Bus  courses             --
     -----------------------------------------------------------------------------
     
--     IF v_spriden_id = '273567920' AND v_campus = 'BI' THEN
--        v_spriden_id := 'AGENCY   ';
--        v_id_switch := 'Y';
--     END IF;
     
     -----------------------------------------------------------------------------
     -- Replace Larry Zachrich's SSN with 'AGENCY' for Bus  courses             --
     -----------------------------------------------------------------------------
     
--     IF v_spriden_id = '281540070' AND v_campus = 'BI' THEN
--        v_spriden_id := 'AGENCY   ';
--        v_id_switch := 'Y';
--     END IF;

     -----------------------------------------------------------------------------
     -- Get Funding Unit code                                                   --
     -----------------------------------------------------------------------------
     v_fund_unit := '';
    
     
     BEGIN
       SELECT DISTINCT  (SELECT ZRFUXWLK_ORGN_CODE FROM sis_apps.ZRFUXWLK WHERE ZRFUXWLK_DEPT_CODE = a.scbcrse_dept_code)
         INTO v_fund_unit
         FROM scbcrse a
         WHERE a.scbcrse_subj_code||a.scbcrse_crse_numb||'      '=
               SUBSTR(v_course_id,1,7)||'      '
           AND a.scbcrse_eff_term=
                (SELECT MAX(b.scbcrse_eff_term)
                 FROM scbcrse b
                 WHERE a.scbcrse_subj_code=b.scbcrse_subj_code
                   AND a.scbcrse_crse_numb=b.scbcrse_crse_numb);
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
        p_print_record('Warning: No funding found for '||v_subj_code, v_pidm);
        WHEN OTHERS THEN
        p_print_record('FUND:'||v_subj_code,v_pidm);
        p_print_record(SQLERRM(SQLCODE), v_pidm);
    END;
      
     
     v_fund_unit := RPAD(v_fund_unit,30,' ');
     ----------------------- End Taryn Modification ------------------------------

     -----------------------------------------------------------------------------
     -- BUILD String of SCHD codes                                              --
     -----------------------------------------------------------------------------
     OPEN schd_rec(v_campus,v_subj_code, v_crse_numb);
     LOOP

     FETCH schd_rec
         INTO v_schd_code;
     
           EXIT WHEN schd_rec%NOTFOUND;
     
     
        IF v_insm_code = 'PVHS' THEN
            v_schd_code := 'HI';
        ELSIF v_insm_code = 'PVHC' THEN
            v_schd_code := 'CI';
        ELSE
            v_schd_code := v_schd_code;
        END IF; 
  
          
/*     IF v_schd_code = 'LL' AND instr(nvl(v_schd_string,'xx'),'LE') = 0 THEN     -- for both Lab/Lecture
        v_schd_string := v_schd_string||'LBLE';
     ELSIF v_schd_code = 'LL' AND instr(nvl(v_schd_string,'xx'),'LE') <> 0 THEN
           v_schd_string := v_schd_string||'LB';
     ELSE
        v_schd_string := v_schd_string||v_schd_code;
     END IF;                                                                 */
     
     IF v_schd_code = 'LL' AND INSTR(NVL(v_schd_string,'xx'),'LE') = 0 THEN     -- for both Lab/Lecture
        v_schd_string := v_schd_string||'LBLE';
     ELSIF v_schd_code = 'LL' AND INSTR(NVL(v_schd_string,'xx'),'LE') <> 0 THEN
           v_schd_string := v_schd_string||'LB';
     ELSIF INSTR(NVL(v_schd_string,'xx'),v_schd_code) = 0 THEN
           v_schd_string := v_schd_string||v_schd_code;
     ELSE
        NULL;
     END IF;
     
     END LOOP;  
     CLOSE schd_rec;
     v_schd_string := RPAD(v_schd_string,22,' ');

    SELECT NVL(MIN(1),0)
    INTO v_dup_exists
    FROM DUAL 
    WHERE v_spriden_last_name LIKE '%DUP%';
    
    IF v_dup_exists= 1 THEN
      p_print_record('Warning: Duplicate PIDM Found', v_pidm);
    END IF;
    
--    IF v_campus = 'WEB' THEN
--      v_technology := 'WE            ';
--    END IF;

    IF v_insm_code = 'DL' THEN
        v_technology := 'WE            ';
     ELSE
        v_technology := 'NA            ';
     END IF;
     
    IF  v_dup_exists=0 THEN
      UTL_FILE.PUT_LINE(FILE_HANDLE,v_camp||v_spriden_id||v_id_switch||v_course_id||v_seq_numb||v_fund_unit||v_schd_string||v_technology||v_delete);
    END IF;
    
  END LOOP;  
  
  CLOSE stfile_rec;

  UTL_FILE.FCLOSE(FILE_HANDLE);
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  
  DBMS_OUTPUT.PUT_LINE('**End Procedure ST**');  
  
  EXCEPTION

    WHEN no_param_exception THEN
      DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error Here:' || SQLERRM(SQLCODE));
      DBMS_OUTPUT.PUT_LINE('Program Terminated.');
      UTL_FILE.FCLOSE_ALL;   
       
END PZ_CREATE_HEI_ST;


PROCEDURE PZ_CREATE_HEI_OC(p_term IN VARCHAR2) IS
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_OC.

        TABLES: SATURN.SPBPERS  - SELECT
                SATURN.SPRIDEN  - SELECT
                SATURN.ZRBCNHD  - SELECT 
                SATURN.SSRMEET  - SELECT 
                SATURN.SSBSECT  - SELECT
                SATURN.SLBBLDG  - SELECT
==============================================================================*/ 
--p_term            VARCHAR2(30)        :=    200120;

v_instance            VARCHAR2(9);
no_param_exception    EXCEPTION;

v_job                VARCHAR2(20);

v_totrec            NUMBER;
v_sess                VARCHAR2(5);
v_year                VARCHAR2(8);

v_ssbsect_campus    VARCHAR2(4);
v_zrbcnhd_course    VARCHAR2(12);
v_zrbcnhd_section    VARCHAR2(6);
v_slbbldg_zip        VARCHAR2(10);
       
ws_first_rec        BOOLEAN := TRUE;

utl_file_dir        VARCHAR2(100);

FILE_HANDLE            UTL_FILE.FILE_TYPE;
ERROR_HANDLE        UTL_FILE.FILE_TYPE;

CURSOR ocfile_rec(v_term VARCHAR2) IS
SELECT DISTINCT DECODE(ssbsect_camp_code,'M','TRRA','OC','TRRA','TRRA'),
       RPAD(zrbcnhd_course,12,' '), RPAD(zrbcnhd_section,6,' '), 
        NVL( CASE WHEN slbbldg_zip IS NULL THEN (SELECT ssrtext_text FROM ssrtext s1
        WHERE s1.ssrtext_term_code = ssbsect_term_code
        AND s1.ssrtext_seqno = (SELECT MAX(s2.ssrtext_seqno) FROM ssrtext s2 WHERE s1.ssrtext_crn=s2.ssrtext_crn AND s1.ssrtext_term_code=s2.ssrtext_term_code)
        AND LENGTH(TRIM(TRANSLATE(s1.ssrtext_text, ' +-.0123456789', ' '))) IS NULL AND s1.ssrtext_crn=ssbsect_crn)
       ELSE slbbldg_zip
       END ,'BLANK-BLDG')     
FROM zrbcnhd, ssrmeet, ssbsect, slbbldg
WHERE zrbcnhd_term = v_term
  AND zrbcnhd_crn = ssrmeet_crn
  AND ssrmeet_term_code = zrbcnhd_term
  AND ssbsect_term_code = ssrmeet_term_code
  AND ssbsect_crn = ssrmeet_crn
  AND ssrmeet_bldg_code = slbbldg_bldg_code(+)
  AND (SSRMEET_BLDG_CODE IN ('OFF','PC','FOSTOR','UTSP') OR SSBSECT_INSM_CODE IN ('PVHS','PVHC') OR ssbsect_camp_code IN ('OC'))
  AND ssbsect_enrl>0;
  

------------------------------------
-- Begin Procedure Declarations --
------------------------------------

-----------------------------------------------------------------------------
-- Procedure: P_Print_Error
--  Prints the record with the error message passed in as a parameter
-----------------------------------------------------------------------------

PROCEDURE P_PRINT_record(messageIn VARCHAR2, pidmIn NUMBER) IS
    ws_pline        VARCHAR2(250);
    ws_id           VARCHAR2(9);
    ws_name         VARCHAR2(32);
    ws_run            VARCHAR2(20);    
    ws_ssn          VARCHAR2(9); 

BEGIN

  IF ws_first_rec THEN
    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
    INTO ws_run
    FROM dual;
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                       TRRA; Fremont, OHIO');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: ZRRCROC                    Errors found while generating OBOR OC File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'SSN       Pidm      Name                               Message'); 
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------- --------  --------------------------------   ------------------------------'); 
    UTL_FILE.FFLUSH(ERROR_HANDLE);    
  END IF;

  ws_first_rec := FALSE;

  BEGIN
    SELECT spriden_id, RPAD(SUBSTR(spriden_last_name||', '||spriden_first_name||' '||
                 spriden_mi,1,32),32,' '), spbpers_ssn
    INTO ws_id, ws_name, ws_ssn
    FROM spriden,spbpers
    WHERE spriden_pidm = pidmIn
      AND spriden_change_ind IS NULL
      AND spriden_pidm = spbpers_pidm;
    EXCEPTION
      WHEN OTHERS THEN
        ws_name :='Error reading SPRIDEN for pidm= ' || pidmIn;
        ws_id := '????????';
  END;
     
  ws_pline := ws_ssn || ' ' || pidmIn ||'  '|| ws_name || '   ' ||messageIn;

  
  UTL_FILE.PUT_LINE(ERROR_HANDLE, ws_pline);
  UTL_FILE.FFLUSH(ERROR_HANDLE);   

END P_PRINT_record;

-----------------------------------------------------------------------------

/*************** Main Program **********************/

BEGIN
DBMS_OUTPUT.PUT_LINE('**Begin Procedure OC**');    
-------------------------------------------------------------

  utl_file_dir      := 'STU_OUT';
  FILE_HANDLE     := UTL_FILE.FOPEN(utl_file_dir,'OC_filedata.dat','w');
  ERROR_HANDLE   := UTL_FILE.FOPEN(utl_file_dir,'zrrcroc_errors.lis','w');    
  
-------------------------------------------------------------
  
 -- Make sure table has no records for the Term ..
    DELETE FROM zrbcnhd
    WHERE zrbcnhd_term=p_term;
    
-- Insert all course-sections that end by the term end date ..
    ---   (The other course-sections will be reported the next term) ..
    INSERT INTO zrbcnhd
    SELECT DISTINCT ssbsect_term_code,
       ssbsect_crn,
       ssbsect_subj_code||ssbsect_crse_numb,
       ssbsect_seq_numb      
    FROM ssbsect,stvterm,ssrmeet
    WHERE ssbsect_term_code=p_term
    AND ssbsect_term_code=stvterm_code
    AND ssbsect_crn=ssrmeet_crn
    AND ssbsect_term_code=ssrmeet_term_code
    AND ssrmeet_end_date<=stvterm_end_date
    AND ssbsect_enrl>0;


  SELECT COUNT(DISTINCT ssbsect_camp_code||zrbcnhd_course||zrbcnhd_section||slbbldg_zip)
  INTO v_totrec
FROM zrbcnhd, ssrmeet, ssbsect, slbbldg
WHERE zrbcnhd_term = p_term
  AND zrbcnhd_crn = ssrmeet_crn
  AND ssrmeet_term_code = zrbcnhd_term
  AND ssbsect_term_code = ssrmeet_term_code
  AND ssbsect_crn = ssrmeet_crn
  AND ssrmeet_bldg_code = slbbldg_bldg_code(+)
  AND (SSRMEET_BLDG_CODE IN ('OFF','PC','FOSTOR','UTSP') OR SSBSECT_INSM_CODE IN ('PVHS','PVHC') OR ssbsect_camp_code IN ('OC'))
  AND ssbsect_enrl>0;


  v_sess := SUBSTR(p_term, LENGTH(p_term) - 1,2);
   
   v_year := SUBSTR(p_term,1, LENGTH(p_term) - 2);
 
  IF v_sess = '30' THEN
    v_sess := 'SM';
  ELSIF v_sess = '40' THEN
    v_sess := 'AU';
  ELSIF v_sess = '10' THEN
    v_sess := 'SP';
  END IF;

  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRAOC'||v_year||v_sess||LPAD(v_totrec,6,0));
  
  OPEN ocfile_rec(p_term);
  
  LOOP
  
    FETCH ocfile_rec 
    INTO v_ssbsect_campus, v_zrbcnhd_course,
     v_zrbcnhd_section, v_slbbldg_zip;

    EXIT WHEN ocfile_rec%NOTFOUND;
    
    IF v_slbbldg_zip = 'FOREIGN' THEN 
        v_slbbldg_zip := 'FOREIGNCN';
    END IF;
    
    IF SUBSTR(v_slbbldg_zip,6,1) = '-' THEN
              v_slbbldg_zip := SUBSTR(v_slbbldg_zip,1,5)
                            || SUBSTR(v_slbbldg_zip,7,4);
    END IF;
    
     v_slbbldg_zip := RPAD(v_slbbldg_zip,9,' ');
     
    UTL_FILE.PUT_LINE(FILE_HANDLE, v_ssbsect_campus || v_zrbcnhd_course ||
                      v_zrbcnhd_section || v_slbbldg_zip || 'N');
  
  END LOOP;  
      
  CLOSE ocfile_rec;
  UTL_FILE.FCLOSE(FILE_HANDLE);
  UTL_FILE.FCLOSE(ERROR_HANDLE);
DBMS_OUTPUT.PUT_LINE('**End Procedure OC**');   
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE(FILE_HANDLE);
       
END PZ_CREATE_HEI_OC;

PROCEDURE PZ_CREATE_HEI_AP(p_term IN VARCHAR2) IS
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_AP.

        TABLES: SOBCURR - Curriculum Base Rules Table
                SORCCON - Concentration Curriculum Rules Table
                SORCMJR - Curriculum Major Rules Table
                STVDEGC - Degree Code Validation Table
                STVMAJR - Major Code Validation Table
                PROGRAM_XREF - Old Program Code / New Program Code Cross-Ref
                SMBPGEN - General Program Requirements Table
==============================================================================*/ 
no_param_exception        EXCEPTION;

v_totrec                  NUMBER;
v_sess                    VARCHAR2(5);
v_year                    VARCHAR2(8);
v_rec_withzero            NUMBER;
v_sobcurr_camp_code       VARCHAR2(1);
v_sobcurr_prog_conc       VARCHAR2(20);
v_stvmajr_cipc_code       VARCHAR2(6);
v_stvdegc_acat_code       VARCHAR2(2);
v_sobcurr_degc_code       VARCHAR2(6);
v_stvmajr_desc            VARCHAR2(30);
v_stvdegc_dlev_code       VARCHAR2(2);
v_sorcmjr_adm_ind         VARCHAR2(1);

v_prog_conc               VARCHAR2(15);
v_cipc_code               VARCHAR2(6);
v_dlev_code               VARCHAR2(2);
v_degc_code               VARCHAR2(3);
v_desc                    VARCHAR2(40);
v_min_time                VARCHAR2(3);
v_min_crd                 VARCHAR2(3);
v_prog_status             VARCHAR2(1);
v_year_inactive           VARCHAR2(4)        := 'UNKN';
v_term_inactive           VARCHAR2(2)        := 'NA';
v_program_title           VARCHAR2(100);
v_req_credits_overall     NUMBER(11,3);
v_active_ind              VARCHAR2(1);

ws_first_rec              BOOLEAN     := TRUE;
             
utl_file_dir              VARCHAR2(100);

FILE_HANDLE               UTL_FILE.FILE_TYPE;
ERROR_HANDLE              UTL_FILE.FILE_TYPE;

CURSOR apfile_rec(v_term VARCHAR2) IS
        
    SELECT DISTINCT SOBCURR_CAMP_CODE,
            SOBCURR_PROGRAM,
            STVMAJR_CIPC_CODE,
            STVDEGC_ACAT_CODE,
            SOBCURR_DEGC_CODE,            
            STVMAJR_DESC,                 
            STVDEGC_DLEV_CODE,
            SORCMJR_ADM_IND,
            SMRPRLE_PROGRAM_DESC,
            smbpgen_req_credits_overall,
            smbpgen_active_ind
     FROM SOBCURR LEFT OUTER JOIN SORCCON
        ON SOBCURR_CURR_RULE=SORCCON_CURR_RULE
                  LEFT OUTER JOIN smbpgen
        ON sobcurr_program=smbpgen_program 
       AND smbpgen_active_ind='Y'
         ,SORCMJR A,
          STVMAJR,
          STVDEGC,
          SMRPRLE,
           (SELECT DISTINCT sgbstdn_program_1 AS PROGRAM
            FROM sfrstcr, sgbstdn a
            WHERE sfrstcr_term_code IN ( '201630','201640')
            AND a.sgbstdn_term_code_eff = (SELECT MAX(b.sgbstdn_term_code_eff) FROM sgbstdn b WHERE a.sgbstdn_pidm = b.sgbstdn_pidm AND b.sgbstdn_term_code_eff <= sfrstcr_term_code)
            AND sfrstcr_rsts_code LIKE 'R%'
            AND sfrstcr_pidm = a.sgbstdn_pidm) reqProgram     
     WHERE SOBCURR_CURR_RULE = SORCMJR_CURR_RULE        
     AND A.SORCMJR_TERM_CODE_EFF = 
         (SELECT MAX(C.SORCMJR_TERM_CODE_EFF)
          FROM SORCMJR C
          WHERE C.SORCMJR_TERM_CODE_EFF <= p_term  
          AND C.SORCMJR_CURR_RULE = A.SORCMJR_CURR_RULE) 
     AND SOBCURR_DEGC_CODE = STVDEGC_CODE
     AND SORCMJR_MAJR_CODE = STVMAJR_CODE
     AND SOBCURR_PROGRAM = SMRPRLE_PROGRAM
     AND SUBSTR(smrprle_program_desc,1,2)<>'NO'
     AND SUBSTR(stvmajr_desc,1,2)<>'NO'
     AND reqProgram.Program = SOBCURR_PROGRAM;
 
------------------------------------
-- Begin Procedure Declarations --
------------------------------------

------------------------------------------------------------------------------
-- Procedure: P_Print_Error
-- Prints the record with the error message passed in as a parameter
------------------------------------------------------------------------------

PROCEDURE P_PRINT_record(messageIn VARCHAR2) IS
    ws_pline        VARCHAR2(250);
    ws_id           VARCHAR2(9);
    ws_name         VARCHAR2(32);
    ws_run          VARCHAR2(20);

BEGIN

  IF ws_first_rec THEN
    SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
    INTO ws_run
    FROM dual;
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                 TRRA; Fremont, Ohio');    
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: ZRRCRAP            Errors found while generating HEI - AP File          Term: ' || p_term);
    UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'Course Identifier                  Message');
    UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------------------               ------------------------------');
  END IF;

  ws_first_rec := FALSE;
   
  UTL_FILE.PUT_LINE(ERROR_HANDLE,messageIn);  

END P_PRINT_record;

------------------------------------------------------------------------------
    
/****************************************************/
/******************** Main Program ******************/
/****************************************************/

BEGIN

------------------------------------------------------------------------------
 DBMS_OUTPUT.PUT_LINE('**Begin Procedure AP**');
  utl_file_dir := 'STU_OUT';
  FILE_HANDLE  := UTL_FILE.FOPEN(utl_file_dir,'AP_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'zrrcrap_errors.lis','w');     

------------------------------------------------------------------------------


SELECT COUNT(*)
         INTO v_totrec
     FROM
        (   SELECT DISTINCT SOBCURR_CAMP_CODE,
            SOBCURR_PROGRAM,
            STVMAJR_CIPC_CODE,
            STVDEGC_ACAT_CODE,
            SOBCURR_DEGC_CODE,            
            STVMAJR_DESC,                 
            STVDEGC_DLEV_CODE,
            SORCMJR_ADM_IND,
            SMRPRLE_PROGRAM_DESC,
            smbpgen_req_credits_overall,
            smbpgen_active_ind
     FROM SOBCURR LEFT OUTER JOIN SORCCON
        ON SOBCURR_CURR_RULE=SORCCON_CURR_RULE
                  LEFT OUTER JOIN smbpgen
        ON sobcurr_program=smbpgen_program 
       AND smbpgen_active_ind='Y'
         ,SORCMJR A,
          STVMAJR,
          STVDEGC,
          SMRPRLE,
           (SELECT DISTINCT sgbstdn_program_1 AS PROGRAM
            FROM sfrstcr, sgbstdn a
            WHERE sfrstcr_term_code IN ( '201630','201640')
            AND a.sgbstdn_term_code_eff = (SELECT MAX(b.sgbstdn_term_code_eff) FROM sgbstdn b WHERE a.sgbstdn_pidm = b.sgbstdn_pidm AND b.sgbstdn_term_code_eff <= sfrstcr_term_code)
            AND sfrstcr_rsts_code LIKE 'R%'
            AND sfrstcr_pidm = a.sgbstdn_pidm) reqProgram     
     WHERE SOBCURR_CURR_RULE = SORCMJR_CURR_RULE        
     AND A.SORCMJR_TERM_CODE_EFF = 
         (SELECT MAX(C.SORCMJR_TERM_CODE_EFF)
          FROM SORCMJR C
          WHERE C.SORCMJR_TERM_CODE_EFF <= p_term  
          AND C.SORCMJR_CURR_RULE = A.SORCMJR_CURR_RULE) 
     AND SOBCURR_DEGC_CODE = STVDEGC_CODE
     AND SORCMJR_MAJR_CODE = STVMAJR_CODE
     AND SOBCURR_PROGRAM = SMRPRLE_PROGRAM
     AND SUBSTR(smrprle_program_desc,1,2)<>'NO'
     AND SUBSTR(stvmajr_desc,1,2)<>'NO'
     AND reqProgram.Program = SOBCURR_PROGRAM);

  v_sess := SUBSTR(p_term, LENGTH(p_term) - 1,2);
   
   v_year := SUBSTR(p_term,1, LENGTH(p_term) - 2);
 
  IF v_sess = '30' THEN
    v_sess := 'SM';
  ELSIF v_sess = '40' THEN
    v_sess := 'AU';
  ELSIF v_sess = '10' THEN
    v_sess := 'SP';
  END IF;
  
  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRAAP'||v_year||v_sess||LPAD(v_totrec,6,0));
  --DBMS_OUTPUT.PUT_LINE('TRRAAP'||v_year||v_sess||LPAD(v_totrec,6,0));

  OPEN apfile_rec(p_term);
  
  LOOP
  
    FETCH apfile_rec 
    INTO v_sobcurr_camp_code,   v_sobcurr_prog_conc,
         v_stvmajr_cipc_code,   v_stvdegc_acat_code,
         v_sobcurr_degc_code,   v_stvmajr_desc,
         v_stvdegc_dlev_code,   v_sorcmjr_adm_ind,
         v_program_title,
         v_req_credits_overall, v_active_ind;
       
    EXIT WHEN apfile_rec%NOTFOUND;

    IF v_sobcurr_prog_conc LIKE 'RHOD%' THEN
      v_sobcurr_prog_conc := 'RHOD'||SUBSTR(v_sobcurr_prog_conc,-4,4);
    END IF;  
    
    v_prog_conc   := RPAD(v_sobcurr_prog_conc,15,' ');
    v_cipc_code   := v_stvmajr_cipc_code;
    
    v_degc_code   := RPAD(v_sobcurr_degc_code,3,' ');
    IF v_degc_code = 'ND ' THEN
      v_degc_code := 'XXX';
    ELSIF v_degc_code = 'AA ' THEN
      v_degc_code := 'AAR';
    ELSIF v_degc_code = 'AS ' THEN
      v_degc_code := 'ASC';  
    ELSIF v_degc_code = 'LTC' THEN
      v_degc_code := 'XXX';      
    END IF;    
    
    --v_desc        := RPAD(v_stvmajr_desc,40,' ');
    --since Terra has no concentrations we should leave this blank
    v_desc        := RPAD(' ',40,' ');

    v_dlev_code   := 'XX';
    v_min_time  := '000';
    v_min_crd   := '000';
--    IF  v_stvdegc_dlev_code = 'LC' AND
--        v_sobcurr_degc_code='LTCERT' THEN
--      v_dlev_code := '01';
--      v_min_time  := '050';
--      v_min_crd   := lpad(to_char(nvl(v_req_credits_overall,15)),3,0);
--    ELSIF v_stvdegc_dlev_code = 'CE' THEN
--      v_dlev_code := '02';
--      v_min_time  := '100';
--      v_min_crd   := lpad(to_char(nvl(v_req_credits_overall,30)),3,0);
--    ELSIF v_stvdegc_dlev_code = 'AS' THEN
--      v_dlev_code := '03';
--      v_min_time  := '200';
--      v_min_crd   := lpad(to_char(nvl(v_req_credits_overall,60)),3,0);
--    END IF; 
    
    
    IF v_stvdegc_acat_code = '21' THEN
        v_dlev_code := '01';
        v_min_time  := '050';
        v_min_crd   := LPAD(TO_CHAR(NVL(v_req_credits_overall,15)),3,0);
    ELSIF v_stvdegc_acat_code = '22' THEN
        v_dlev_code := '02';
        v_min_time  := '100';
        v_min_crd   := LPAD(TO_CHAR(NVL(v_req_credits_overall,30)),3,0);
    ELSIF v_stvdegc_acat_code = '23' THEN
        v_dlev_code := '03';
        v_min_time  := '200';
        v_min_crd   := LPAD(TO_CHAR(NVL(v_req_credits_overall,60)),3,0);
    ELSIF v_stvdegc_acat_code = '24' THEN
    v_dlev_code := '05';
    ELSIF v_stvdegc_acat_code = '25' THEN
    v_dlev_code := '04';
    ELSIF v_stvdegc_acat_code = '41' THEN
    v_dlev_code := '06';
    ELSIF v_stvdegc_acat_code = '42' THEN
    v_dlev_code := '07';
    ELSIF v_stvdegc_acat_code = '43' THEN
    v_dlev_code := '08';
    END IF;
    
    v_prog_status := 'A';
    IF v_active_ind <> 'Y' THEN
      v_prog_status := 'I';
    END IF;
    
    v_program_title := RPAD(v_program_title,100);

    IF v_cipc_code IS NULL THEN
      p_print_record(v_sobcurr_prog_conc||'                           NULL CIP Code.');
    ELSE
      UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRA'||v_prog_conc||v_cipc_code||v_dlev_code||
                        v_degc_code||v_desc||v_min_time||v_min_crd||v_prog_status||
                        v_year_inactive||v_term_inactive||'N'||v_program_title); 
    END IF;

  END LOOP;  
      
  CLOSE apfile_rec;
  UTL_FILE.FCLOSE(FILE_HANDLE);
  
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  DBMS_OUTPUT.PUT_LINE('**End Procedure AP**');
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE_ALL;

END PZ_CREATE_HEI_AP;

PROCEDURE PZ_CREATE_HEI_TF(p_year IN VARCHAR2) IS  --1.1
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_TF.

        TABLES: TBRACCD
                SPBPERS
 ===============================================================================*/ 
no_param_exception        EXCEPTION;

v_totrec                  NUMBER;
v_spbpers_ssn           hei_tf_sum.spbpers_ssn%TYPE;
v_tbraccd_term_code     hei_tf_sum.tbraccd_term_code%TYPE;
v_amount                hei_tf_sum.amount%TYPE;
v_charge_type           hei_tf_sum.charge_type%TYPE;  

v_inst_id               VARCHAR2(1);
v_term                  VARCHAR2(2);   
        
utl_file_dir              VARCHAR2(100);
FILE_HANDLE               UTL_FILE.FILE_TYPE;


CURSOR tffile_rec IS
    SELECT spbpers_ssn,
               tbraccd_term_code,
               charge_type,
               SUM(amount)
        FROM sis_apps.hei_tf_sum
        GROUP BY spbpers_ssn,
                 tbraccd_term_code,
                 charge_type
        ORDER BY spbpers_ssn,
                 tbraccd_term_code,
                 charge_type;  

 
------------------------------------
-- Begin Procedure Declarations --
------------------------------------
------------------------------------------------------------------------------
    
/****************************************************/
/******************** Main Program ******************/
/****************************************************/

BEGIN

------------------------------------------------------------------------------
 DBMS_OUTPUT.PUT_LINE('**Begin Procedure TF**');
 utl_file_dir := 'AR_OUT'; 
  FILE_HANDLE  := UTL_FILE.FOPEN(utl_file_dir,'TF_filedata.dat','w');    
  
------------------------------------------------------------------------------
--insert summary transactions into temp table 
DELETE FROM sis_apps.hei_tf_sum;

INSERT INTO sis_apps.hei_tf_sum
SELECT NVL(spbpers_ssn, spriden_id) AS spbpers_ssn,
       tbraccd_term_code,
       tbraccd_detail_code,
       SUM(tbraccd_amount),
    CASE WHEN tbraccd_detail_code = 'F1A1' THEN 'OF'
         WHEN tbraccd_detail_code = 'F1G1' THEN 'GF' 
         WHEN tbraccd_detail_code = 'FLB1' THEN 'CF' 
         WHEN tbraccd_detail_code = 'FLE1' THEN 'CF' 
         WHEN tbraccd_detail_code = 'FLH1' THEN 'CF'
         WHEN tbraccd_detail_code = 'M2AT' THEN 'OF'
         WHEN tbraccd_detail_code = 'TOSI' THEN 'OD'
         WHEN tbraccd_detail_code = 'TOSN' THEN 'OS'
         WHEN tbraccd_detail_code = 'TUIT' THEN 'TU'
         WHEN tbraccd_detail_code = 'F1R1' THEN 'OF'
         WHEN tbraccd_detail_code = 'F1T1' THEN 'OF'
        END AS ChargeType
FROM tbraccd 
JOIN tbbdetc ON (tbraccd_detail_code = tbbdetc_detail_code)
JOIN spbpers ON (tbraccd_pidm = spbpers_pidm) 
LEFT OUTER JOIN sorhsch ON (spbpers_pidm = sorhsch_pidm)
JOIN spriden ON (spbpers_pidm = spriden_pidm)  
WHERE tbraccd_term_code IN
    (SELECT stvterm_code
     FROM stvterm
     WHERE stvterm_acyr_code = p_year)
AND tbbdetc_type_ind = 'C'
AND spriden_change_ind IS NULL
AND tbraccd_detail_code IN ('F1A1','F1G1','FLB1','FLE1','FLH1','M2AT','TOSI','TOSN','TUIT','F1R1','F1T1')
AND TO_CHAR(NVL(sorhsch_graduation_date,'01-JAN-1900'), 'YYYY') < p_year
GROUP BY spbpers_ssn,
         spriden_id,
         tbraccd_term_code,
         tbraccd_detail_code
ORDER BY spbpers_ssn,
         tbraccd_term_code,
         tbraccd_detail_code;
COMMIT;

SELECT COUNT(*)
         INTO v_totrec
     FROM
        (SELECT spbpers_ssn,
               tbraccd_term_code,
               charge_type,
               SUM(amount)
        FROM sis_apps.hei_tf_sum
        GROUP BY spbpers_ssn,
                 tbraccd_term_code,
                 charge_type
        HAVING SUM(amount)<> 0          
        ORDER BY spbpers_ssn,
                 tbraccd_term_code,
                 charge_type);


  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRATF'||p_year||'NA'||LPAD(v_totrec,6,0));

     OPEN tffile_rec;
     LOOP
          FETCH tffile_rec INTO v_spbpers_ssn,
                                  v_tbraccd_term_code,
                                  v_charge_type,
                                  v_amount;
          EXIT WHEN tffile_rec%NOTFOUND;
          
          IF v_amount <> 0 THEN
          
            v_inst_id := 'N';
                
            IF SUBSTR(v_spbpers_ssn,1,1) = 'T' THEN
                v_inst_id := 'Y';
            END IF;
            
            IF SUBSTR(v_spbpers_ssn,1,3) = '000' OR SUBSTR(v_spbpers_ssn,1,3) = '666' THEN
                v_inst_id := 'Y';
            END IF;
            
            IF SUBSTR(v_spbpers_ssn,1,3) >= '900' AND SUBSTR(v_spbpers_ssn,1,3) <= '999'THEN
                v_inst_id := 'Y';
            END IF;    
                        
            IF SUBSTR(v_tbraccd_term_code,5,2)='10' THEN
               v_term := 'SP';
            END IF;
            IF SUBSTR(v_tbraccd_term_code,5,2)='40' THEN
               v_term := 'AU';
            END IF;
            IF SUBSTR(v_tbraccd_term_code,5,2)='30' THEN
               v_term := 'SM';
            END IF; 
            
--            DBMS_OUTPUT.PUT_LINE (v_spbpers_ssn||
--                                    v_inst_id||
--                                    v_term||
--                                    v_charge_type||
--                                    lpad(v_amount*100,7,0)||
--                                    lpad(' ',10,' ')||
--                                    'N'
--                                   );     
            UTL_FILE.PUT_LINE(FILE_HANDLE,v_spbpers_ssn||
                                    v_inst_id||
                                    v_term||
                                    v_charge_type||
                                    LPAD(v_amount*100,7,0)||
                                    LPAD(' ',10,' ')||
                                    'N');                           
          
          END IF;

     END LOOP;
     
     CLOSE tffile_rec;

  UTL_FILE.FCLOSE(FILE_HANDLE);

  DBMS_OUTPUT.PUT_LINE('**End Procedure TF**');
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE_ALL;

END PZ_CREATE_HEI_TF;


PROCEDURE PZ_CREATE_HEI_UF(p_year IN VARCHAR2) IS --1.2
 /*===============================================================================
        AUTHOR: Meena

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_UF.

        TABLES: TBRACCD
                SPBPERS
 ===============================================================================*/ 
no_param_exception        EXCEPTION;

  v_totrec                  NUMBER;
  v_spbpers_ssn           sis_apps.hei_uf_sum.spbpers_ssn%TYPE;
  v_tbraccd_term_code     sis_apps.hei_uf_sum.tbraccd_term_code%TYPE;
  v_amount                sis_apps.hei_uf_sum.amount%TYPE;
  v_funding_source        sis_apps.hei_uf_sum.funding_source%TYPE;
  v_funding_type          sis_apps.hei_uf_sum.funding_type%TYPE;
  v_amount_type           sis_apps.hei_uf_sum.amount_type%TYPE; 

  v_inst_id               VARCHAR2(1);
  v_term                  VARCHAR2(2);   
        
  utl_file_dir              VARCHAR2(100);
  FILE_HANDLE               UTL_FILE.FILE_TYPE;


CURSOR uffile_rec IS
    SELECT spbpers_ssn,
               tbraccd_term_code,
               funding_source,
               funding_type,
               amount_type,
               SUM(amount)
        FROM sis_apps.hei_uf_sum
        GROUP BY spbpers_ssn,
                 tbraccd_term_code,
                 funding_source,
                 funding_type,
                 amount_type
        ORDER BY spbpers_ssn,
                 tbraccd_term_code,
                 funding_source,
                 funding_type,
                 amount_type;

 
------------------------------------
-- Begin Procedure Declarations --
------------------------------------
------------------------------------------------------------------------------
    
/****************************************************/
/******************** Main Program ******************/
/****************************************************/

BEGIN

------------------------------------------------------------------------------
 DBMS_OUTPUT.PUT_LINE('**Begin Procedure UF**');
  --utl_file_dir := 'STU_OUT';
  utl_file_dir := 'FINAID_OUT';
--  utl_file_dir := '/u08/app/hei';  
  FILE_HANDLE  := UTL_FILE.FOPEN(utl_file_dir,'UF_filedata.dat','w');    
  
------------------------------------------------------------------------------
--insert summary transactions into temp table 
DELETE FROM sis_apps.hei_uf_sum;
 
INSERT INTO sis_apps.hei_uf_sum
SELECT spbpers_ssn,
       tbraccd_term_code,
       tbraccd_detail_code,
       SUM(tbraccd_amount),
       tmpFund.uf_funding_source,
       tmpFund.uf_funding_type,
       (CASE WHEN tmpFund.fund_type = 'LOAN' THEN 'L'
             WHEN tmpFund.fund_type = 'GRNT' THEN 'G'
             WHEN tmpFund.fund_type =  'WORK' THEN 'W'
             ELSE 'G' END) AS amount_type
FROM tbraccd,
(SELECT rfrbase_fund_code AS fund_code,
         rfrbase_fund_title AS short_desc,
         rfrbase_detail_code AS ar_detail_code,
         rfrbase_fsrc_code AS fund_source,
         rfrbase_ftyp_code AS fund_type,
         (CASE
             WHEN rfrbase_fsrc_code = 'FNDN' AND rfrbase_ftyp_code = 'SCHL'
             THEN
                'IE'
             WHEN     rfrbase_fsrc_code = 'OUTS'
                  AND rfrbase_ftyp_code IN ('LOAN', 'SCHL')
             THEN
                'OT'
             WHEN rfrbase_fsrc_code = 'STAT'
             THEN
                'ST'
             WHEN rfrbase_fsrc_code = 'INST'
             THEN
                'II'
             WHEN rfrbase_fsrc_code = 'FDRL' AND rfrbase_ftyp_code = 'WORK'
             THEN
                'FD'
             WHEN rfrbase_fund_code IN ('DSUB',
                                        'DUNSUB',
                                        'FSEOG',
                                        'PLUS')
             THEN
                'FD'
             WHEN rfrbase_fund_code = 'PELL'
             THEN
                'FP'
          END)
            AS uf_funding_source,
         (CASE
             WHEN rfrbase_fsrc_code = 'FNDN' AND rfrbase_ftyp_code = 'SCHL'
             THEN
                'O'
             WHEN     rfrbase_fsrc_code = 'OUTS'
                  AND rfrbase_ftyp_code IN ('LOAN', 'SCHL')
             THEN
                'O'
             WHEN     rfrbase_fsrc_code = 'INST' 
                  AND rfrbase_ftyp_code = 'SCHL'
             THEN
                'O'     
             WHEN rfrbase_fsrc_code = 'STAT'
             THEN
                'O'
             WHEN rfrbase_fund_code IN ('DSUB', 'FSEOG', 'PELL')
             THEN
                'N'
             WHEN rfrbase_fund_code = 'DUNSUB'
             THEN
                'O'
             WHEN rfrbase_fund_code = 'PLUS'
             THEN
                'P'
             WHEN rfrbase_fund_code IN ('20000', '20001', '20003')
             THEN
                'M'
             WHEN rfrbase_fund_code IN ('20002', '20004')
             THEN
                'N'
             WHEN rfrbase_fsrc_code = 'FDRL' AND rfrbase_ftyp_code = 'WORK'
             THEN
                'O'
          END)
            AS uf_funding_type
    FROM rfrbase) tmpFund,
tbbdetc,spbpers LEFT OUTER JOIN sorhsch
    ON spbpers_pidm=sorhsch_pidm
WHERE tbraccd_term_code IN
    (SELECT stvterm_code
     FROM stvterm
     WHERE stvterm_acyr_code=p_year)
AND tbbdetc_type_ind='P'
AND tbraccd_detail_code=tbbdetc_detail_code
AND tbraccd_detail_code = tmpFund.ar_detail_code
AND tbraccd_pidm=spbpers_pidm
AND TO_CHAR(NVL(sorhsch_graduation_date,'01-JAN-1900'), 'YYYY') < p_year
GROUP BY spbpers_ssn,
         tbraccd_term_code,
         tbraccd_detail_code,
         tmpFund.uf_funding_source,
         tmpFund.uf_funding_type,
         (CASE WHEN tmpFund.fund_type = 'LOAN' THEN 'L'
             WHEN tmpFund.fund_type = 'GRNT' THEN 'G'
             WHEN tmpFund.fund_type =  'WORK' THEN 'W'
             ELSE 'G' END)
ORDER BY spbpers_ssn,
         tbraccd_term_code,
         tbraccd_detail_code;  


SELECT COUNT(*)
         INTO v_totrec
     FROM
        (SELECT spbpers_ssn,
               tbraccd_term_code,
               funding_source,
               funding_type,
               amount_type,
               SUM(amount)
        FROM sis_apps.hei_uf_sum
        GROUP BY spbpers_ssn,
                 tbraccd_term_code,
                 funding_source,
                 funding_type,
                 amount_type
        HAVING SUM(amount)<> 0  
        ORDER BY spbpers_ssn,
                 tbraccd_term_code,
                 funding_source,
                 funding_type,
                 amount_type
        );
       


  UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRAUF'||p_year||'NA'||LPAD(v_totrec,6,0));
  --DBMS_OUTPUT.PUT_LINE('TRRAAP'||v_year||v_sess||LPAD(v_totrec,6,0));

     OPEN uffile_rec;
     LOOP
          FETCH uffile_rec INTO v_spbpers_ssn,
                                  v_tbraccd_term_code,
                                  v_funding_source,
                                  v_funding_type,
                                  v_amount_type,
                                  v_amount;
          EXIT WHEN uffile_rec%NOTFOUND;
          
          IF v_amount <> 0 THEN
          
             v_inst_id := 'N';
                
            IF SUBSTR(v_spbpers_ssn,1,3) = '000' OR SUBSTR(v_spbpers_ssn,1,3) = '666' THEN
                v_inst_id := 'Y';
            END IF;
            
            IF SUBSTR(v_spbpers_ssn,1,3) >= '900' AND SUBSTR(v_spbpers_ssn,1,3) <= '999'THEN
                v_inst_id := 'Y';
            END IF;    
                        
            IF SUBSTR(v_tbraccd_term_code,5,2)='10' THEN
               v_term := 'SP';
            END IF;
            IF SUBSTR(v_tbraccd_term_code,5,2)='40' THEN
               v_term := 'AU';
            END IF;
            IF SUBSTR(v_tbraccd_term_code,5,2)='30' THEN
               v_term := 'SM';
            END IF; 
            
--DBMS_OUTPUT.PUT_LINE (v_spbpers_ssn||
--                                    v_inst_id||
--                                    v_funding_source||
--                                    v_funding_type||
--                                    lpad(v_amount*100,7,0)||
--                                    v_amount_type||
--                                    lpad(' ',10,' ')||
--                                    v_term||
--                                    'N'
--                                   );     
            UTL_FILE.PUT_LINE(FILE_HANDLE,v_spbpers_ssn||
                                    v_inst_id||
                                    v_funding_source||
                                    v_funding_type||
                                    LPAD(v_amount*100,7,0)||
                                    v_amount_type||
                                    LPAD(' ',10,' ')||
                                    v_term||
                                    'N');                           
          
          END IF;

     END LOOP;
     
     CLOSE uffile_rec;

  UTL_FILE.FCLOSE(FILE_HANDLE);

  DBMS_OUTPUT.PUT_LINE('**End Procedure UF**');
  EXCEPTION

    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
       DBMS_OUTPUT.PUT_LINE(SQLERRM(SQLCODE));
       DBMS_OUTPUT.PUT_LINE('Program Terminated.');
       UTL_FILE.FCLOSE_ALL;

END PZ_CREATE_HEI_UF;



PROCEDURE PZ_CREATE_HEI_DC(p_year IN VARCHAR2) IS  
 /*===============================================================================
        AUTHOR: Bob Barringer

   DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_DC.

        TABLES: SHRDGMR
                SPBPERS
                SHRTGPA
                SHRTCKG
                SHRTMCM
                STVMAJR
                GORSDAV
   ==============================================================================*/ 

v_totrec            int;
v_term_start_date   date;
ws_run              varchar2(20);
ws_first_rec        BOOLEAN := TRUE;
  
FILE_HANDLE UTL_FILE.FILE_TYPE;
ERROR_HANDLE UTL_FILE.FILE_TYPE;
UTL_FILE_DIR VARCHAR2(100);
  

-- any changes to this query need to also be made to the error query below    
CURSOR cur_get_record IS 
SELECT o.campus, o.student_identifier, o.year, o.term, o.level_of_degree, o.academic_program, o.field_of_study, o.credit_hours_to_degree,
       o.delete_switch, o.pidm, o.spriden_id, o.name
FROM sis_apps.hei_dc_output o
WHERE o.year IS NOT NULL 
    AND o.level_of_degree IS NOT NULL 
;

CURSOR cur_err_rec IS 
SELECT UNIQUE spriden_id, student_identifier, pidm, NAME, YEAR, level_of_degree
FROM (
      SELECT e.campus, e.student_identifier, e.year, e.term, e.level_of_degree, e.academic_program, e.field_of_study, e.credit_hours_to_degree, 
             e.delete_switch, e.pidm, e.spriden_id, e.name
      FROM sis_apps.hei_dc_output e
      WHERE e.year IS NULL 
          OR e.level_of_degree IS NULL      
      GROUP BY e.campus, e.student_identifier, e.year, e.term, e.level_of_degree, e.academic_program, e.field_of_study, e.credit_hours_to_degree,
               e.delete_switch, e.pidm, e.spriden_id, e.name
     )
;



BEGIN


EXECUTE IMMEDIATE ' 
TRUNCATE TABLE SIS_APPS.HEI_DC_INPUT DROP STORAGE'; 

EXECUTE IMMEDIATE ' 
TRUNCATE TABLE SIS_APPS.HEI_DC_OUTPUT DROP STORAGE'; 

EXECUTE IMMEDIATE ' 
TRUNCATE TABLE SIS_APPS.HEI_DC_RANKING DROP STORAGE'; 


INSERT INTO sis_apps.hei_dc_ranking ( -- this table is needed to get each degree code/gorsdav value/graduation term for each pidm
SELECT a.shrdgmr_pidm, a.shrdgmr_degc_code, CAST(b.gorsdav_value AS varchar2(4)) AS gorsdav_value, a.shrdgmr_term_code_grad, a.shrdgmr_program
FROM shrdgmr a LEFT OUTER JOIN gorsdav b ON (a.shrdgmr_program = b.gorsdav_pk_parenttab) 
JOIN stvterm ON (shrdgmr_term_code_grad = stvterm_code)
WHERE stvterm_acyr_code = p_year);

COMMIT;

SELECT MIN(stvterm_start_date) INTO v_term_start_date FROM stvterm WHERE stvterm_acyr_code = p_year;

-- this table will have duplicates
INSERT INTO sis_apps.hei_dc_input
WITH degree_recs AS ( -- consolidating transfer module and non-transfer records for each student during the academic year
                     SELECT shrdgmr_pidm, NULL AS shrtmcm_comment, shrdgmr_program
                     FROM shrdgmr
                     WHERE shrdgmr_acyr_code = p_year
                     UNION
                     SELECT shrtmcm_pidm, shrtmcm_comment, 'TRANSFER_MOD'
                     FROM shrtmcm
                     WHERE shrtmcm_comment LIKE 'Ohio%' 
                     AND shrtmcm_effective_date >= v_term_start_date
                    )
SELECT RPAD(b.shrdgmr_pidm, 8, ' ') AS pidm -- rpad here for formatting in the error file
      ,NVL(a.spbpers_ssn, i.spriden_id) AS student_identifier
      ,b.shrdgmr_program
      ,b.shrdgmr_degc_code
      ,b.shrdgmr_term_code_grad 
      ,b.shrdgmr_acyr_code
      ,f.shrtmcm_comment
      ,SUBSTR(b.shrdgmr_term_code_grad, 1, 4) AS grad_year 
      ,e.rk
      ,g.stvmajr_cipc_code
      ,b.shrdgmr_grst_code
      ,CAST(h.gorsdav_value AS varchar2(4)) AS gorsdav_value
      ,CASE
          WHEN b.shrdgmr_term_code_grad LIKE '%40' THEN 'AU'
          WHEN b.shrdgmr_term_code_grad LIKE '%30' THEN 'SM'
          WHEN b.shrdgmr_term_code_grad LIKE '%10' THEN 'SP'
          WHEN b.shrdgmr_term_code_grad LIKE '%20' THEN 'WI'
          ELSE b.shrdgmr_term_code_grad
       END AS term
      ,a.spbpers_ssn
      ,i.spriden_id
      ,RPAD(i.spriden_last_name||', '||i.spriden_first_name||' '||i.spriden_mi, 24, ' ') AS NAME
FROM shrdgmr b LEFT OUTER JOIN spbpers a ON (b.shrdgmr_pidm = a.spbpers_pidm)
               JOIN degree_recs f ON (b.shrdgmr_pidm = f.shrdgmr_pidm)
               JOIN ( 
                     SELECT * 
                     FROM ( -- this is to dedupe the ranking table
                           SELECT hei_dc_ranking.*, RANK () OVER (PARTITION BY shrdgmr_pidm, shrdgmr_degc_code, gorsdav_value ORDER BY rowid) rk
                           FROM sis_apps.hei_dc_ranking 
                          )  
                     ORDER BY shrdgmr_pidm, rk
                    ) e ON (b.shrdgmr_pidm = e.shrdgmr_pidm AND b.shrdgmr_term_code_grad = e.shrdgmr_term_code_grad AND b.shrdgmr_program = e.shrdgmr_program)
               RIGHT OUTER JOIN stvmajr g ON (b.shrdgmr_majr_code_1 = g.stvmajr_code)
               LEFT OUTER JOIN gorsdav h ON (b.shrdgmr_program = h.gorsdav_pk_parenttab) 
               LEFT OUTER JOIN spriden i ON (b.shrdgmr_pidm = i.spriden_pidm AND i.spriden_change_ind IS NULL) 
WHERE 1=1 
   AND b.shrdgmr_grst_code = 'GD'
;


INSERT INTO sis_apps.hei_dc_output
WITH hours AS ( -- shows the sum of all credit hours for every student regardless of when they graduated
               SELECT shrtckg_pidm, LPAD(TRUNC(SUM(shrtckg_credit_hours), 1) * 10, 4, '0') AS credit_hours_to_degree  -- displayed to tenths place with an implied period     
               FROM shrtckg 
               WHERE shrtckg_grde_code_final IN ('A','B','C','D','F','S')
               GROUP BY shrtckg_pidm
              ),    
     query_data AS (
                    SELECT 'TRRA' AS campus
                          ,RPAD(z.student_identifier,  9, ' ') AS student_identifier
                          ,z.grad_year AS YEAR
                          ,z.term 
                          ,z.shrdgmr_term_code_grad
                          ,CASE
                             WHEN z.shrtmcm_comment LIKE 'Ohio%' THEN 'TM'
                             WHEN z.gorsdav_value = 'T1' AND rk = 1 THEN 'T1'
                             WHEN z.gorsdav_value = 'T1' AND rk > 1 THEN 'TA'
                             WHEN z.gorsdav_value = 'T2' THEN 'T2'
                             WHEN z.shrdgmr_degc_code LIKE 'A%' AND rk = 1 THEN '03'
                             WHEN z.shrdgmr_degc_code LIKE 'A%' AND rk > 1 THEN 'A3'
                             WHEN z.gorsdav_value = 'G1' AND rk = 1 THEN 'G1'
                             WHEN z.gorsdav_value = 'G1' AND rk > 1 THEN 'GA'
                             WHEN z.gorsdav_value = 'G2' THEN 'G2'
                             ELSE z.gorsdav_value
                           END AS level_of_degree
                          ,CASE
                             WHEN z.shrtmcm_comment LIKE 'Ohio%' THEN RPAD('TRNMOD1', 15, ' ')
                             ELSE RPAD(z.shrdgmr_program, 15, ' ')
                           END AS academic_program
                          ,CASE
                             WHEN z.shrtmcm_comment LIKE 'Ohio%' THEN RPAD('TRAMOD', 6, ' ')
                             ELSE RPAD(z.stvmajr_cipc_code, 6, ' ')
                           END AS field_of_study
                          ,y.credit_hours_to_degree  
                          ,'N' AS delete_switch
                          ,z.pidm
                          ,z.spriden_id
                          ,z.name
                          ,z.rk
                    FROM sis_apps.hei_dc_input z JOIN hours y ON (z.pidm = y.shrtckg_pidm)
                  )
SELECT * 
FROM ( -- deduping the input table after joining the new fields to it
      SELECT q.*, RANK () OVER (PARTITION BY pidm, level_of_degree, academic_program ORDER BY rowid) rnk 
      FROM query_data q
     )
WHERE rnk = 1    
;
  

  v_totrec := 0;
 
    

-----------------------------------------------------------------------------
  utl_file_dir := 'STU_OUT';
  FILE_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'DC_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'DC_errors.lis','w');    
-----------------------------------------------------------------------------
 
    IF ws_first_rec THEN
        SELECT TO_CHAR(SYSDATE,'MM/DD/YYYY @ HH24:MI')
        INTO ws_run
        FROM dual;
        UTL_FILE.PUT_LINE(ERROR_HANDLE,'Run: ' || ws_run || '                    TRRA; Fremont, OHIO');    
        UTL_FILE.PUT_LINE(ERROR_HANDLE,'Program: PZ_CREATE_HEI_DC               Errors found while generating HEI DC File          Year: ' || p_year);
        UTL_FILE.PUT_LINE(ERROR_HANDLE, ' ');
        UTL_FILE.PUT_LINE(ERROR_HANDLE,'Banner ID SSN       PIDM     Name                     Error');
        UTL_FILE.PUT_LINE(ERROR_HANDLE,'--------- --------- -------- ------------------------ ---------------------------------------------');
    END IF;

  ws_first_rec := FALSE;

    FOR c1_rec IN cur_get_record LOOP
        v_totrec := v_totrec + 1;
    END LOOP;
    
    IF v_totrec > 0 THEN
    UTL_FILE.PUT_LINE(FILE_HANDLE,'TRRADC'||p_year||'NA'||LPAD(v_totrec,6,0)||CHR(13));
    END IF;
  

    -- EXCEPTIONS  
    FOR c1_rec IN cur_err_rec LOOP 
        IF c1_rec.level_of_degree IS NULL THEN
            UTL_FILE.PUT_LINE(ERROR_HANDLE, c1_rec.spriden_id || ' ' || c1_rec.student_identifier || ' ' || c1_rec.pidm || ' ' || c1_rec.name || ' ' || 'level of degree is null'); 
        ELSIF c1_rec.year IS NULL THEN
            UTL_FILE.PUT_LINE(ERROR_HANDLE, c1_rec.spriden_id || ' ' || c1_rec.student_identifier || ' ' || c1_rec.pidm || ' ' || c1_rec.name || ' ' || 'year is null'); 
        END IF; 
    END LOOP;      
      
    FOR c1_rec IN cur_get_record LOOP
        UTL_FILE.PUT_LINE(
        FILE_HANDLE,c1_rec.campus || c1_rec.student_identifier || c1_rec.year || c1_rec.term || c1_rec.level_of_degree || c1_rec.academic_program || c1_rec.field_of_study || c1_rec.credit_hours_to_degree || c1_rec.delete_switch||CHR(13)
        ); 
               
        
    END LOOP;
    
    
    UTL_FILE.FCLOSE(FILE_HANDLE);
    UTL_FILE.FCLOSE(ERROR_HANDLE);



END PZ_CREATE_HEI_DC;


PROCEDURE PZ_CREATE_HEI_CU (p_year IN VARCHAR2) 
IS
    /*===============================================================================
           AUTHOR: Bob Barringer

      DESCRIPTION: Creates the stored procedure PZ_CREATE_HEI_CU.

           TABLES: SFRSTCR - SELECT
                   SOBPTRM - SELECT
                   SGBSTDN - SELECT
                   SPBPERS - SELECT
                   SSBSECT - SELECT
                   SPRIDEN - SELECT
                   SHRGRDE - SELECT
                   SGRSATT - SELECT

           VIEWS:  SZV0910 - SELECT

    ===============================================================================*/
    
    -- Set v_debug_pidm with a value for Debugging purposes ..

    v_debug_pidm                                NUMBER (9);
                                                
    no_param_exception                          EXCEPTION;
                                                
    v_totrec                                    NUMBER;
    v_year                                      VARCHAR2 (4);
    v_term                                      VARCHAR2 (6);
    p_term                                      VARCHAR2 (6);
                                                
    v_term_code                                 VARCHAR2 (2);
    v_sfrstcr_pidm                              NUMBER (9);
    v_spriden_id                                VARCHAR2 (9);
    v_sfrstcr_crn                               VARCHAR2 (5);
    v_shrtckg_term_code                         VARCHAR2 (6);
    v_student_identifier                        VARCHAR2 (9);
    v_ssbsect_subj_code                         VARCHAR2 (4);
    v_ssbsect_crse_numb                         VARCHAR2 (5);
    v_ssbsect_seq_numb                          VARCHAR2 (6);
    v_sfrstcr_credit_hr                         VARCHAR2 (3);
    v_shrtckg_credit_hours                      NUMBER (3);
    v_academic_attempt                          VARCHAR2 (1);
    v_real_rsts_code                            VARCHAR2 (2);
    v_shrtgpa_hours_earned                      NUMBER (5);
    v_course_identifier                         VARCHAR2 (12);
    v_award_credit                              VARCHAR2 (1);
    v_shrtckn_subj_code                         VARCHAR2 (4);
    v_shrtckn_crse_numb                         VARCHAR2 (5);
    v_sgbstdn_levl_code                         VARCHAR2 (2);
    v_s_hours                                   NUMBER (4);
    v_shrtrit_sbgi_code                         VARCHAR (6);
    v_cum_shrtgpa_hours                         NUMBER (5);
    v_cum_shrtrce_hours                         NUMBER (5);
    v_cum_credit_hrs                            NUMBER (5);
    v_cum_credit_hours                          VARCHAR (5);
    v_hours_earned                              NUMBER (8);
    v_shrtgpa_gpa_hours                         NUMBER (8);
    v_shrtgpa_quality_points                    NUMBER (8);
    v_spriden_last_name                         VARCHAR2 (60);
    v_dup_exists                                NUMBER;
    v_course_outcome                            VARCHAR2 (5);
    v_course_grade                              VARCHAR2 (5);
                                                
    gmod_code                                   SATURN.SFRSTCR.SFRSTCR_GMOD_CODE%TYPE;
    grde_code                                   SATURN.SFRSTCR.SFRSTCR_GRDE_CODE%TYPE;
    quality_points                              SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;
    grde_code_final                             SATURN.SHRTCKG.SHRTCKG_GRDE_CODE_FINAL%TYPE;
                                                
    grde_code2                                  SATURN.SFRSTCR.SFRSTCR_GRDE_CODE%TYPE;
    quality_points2                             SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;
                                                
    lab_points                                  SATURN.SHRGRDE.SHRGRDE_QUALITY_POINTS%TYPE;
                                                
                                                
    ws_first_rec                                BOOLEAN := TRUE;
    ws_first_grade                              BOOLEAN := TRUE;
                                                
    utl_file_dir                                VARCHAR2 (100);
                                                
    FILE_HANDLE_CU                              UTL_FILE.FILE_TYPE;
    ERROR_HANDLE                                UTL_FILE.FILE_TYPE;



    CURSOR cufile_rec (p_year varchar2)
    IS
    SELECT DISTINCT cn.pidm, 
           cn.spriden_id,
           sfr.sfrstcr_crn,
           cn.term,
           SUBSTR(cn.term, 1, 4) AS YEAR,
           CASE SUBSTR(cn.term, 5, 2)
                WHEN '10' THEN 'SP'
                WHEN '30' THEN 'SM'
                WHEN '40' THEN 'AU'
                ELSE SUBSTR(cn.term, 5, 2)
           END AS term_code,
           cn.student_identifier,
           cn.course_identifier,
           cn.section_identifier,
           ckg.shrtckg_credit_hours,
           CASE sfr.sfrstcr_rsts_code WHEN 'AU' THEN 'A' ELSE 'I' END AS academic_attempt,
           sfr.sfrstcr_gmod_code,
           ckg.shrtckg_grde_code_final,
           NVL (grd.shrgrde_quality_points, 0) AS shrgrde_quality_points 
    FROM sis_apps.hei_cn_output cn  
    JOIN shrtckn ckn ON (cn.pidm = ckn.shrtckn_pidm AND 
                         cn.term = ckn.shrtckn_term_code AND
                         cn.sfrstcr_crn = ckn.shrtckn_crn)
    JOIN shrtckg ckg ON (ckn.shrtckn_pidm = ckg.shrtckg_pidm AND 
                         ckn.shrtckn_term_code = ckg.shrtckg_term_code AND 
                         ckn.shrtckn_seq_no = ckg.shrtckg_tckn_seq_no)
    JOIN sfrstcr sfr ON (cn.pidm = sfr.sfrstcr_pidm AND 
                         cn.term = sfr.sfrstcr_term_code AND
                         cn.sfrstcr_crn = sfr.sfrstcr_crn)     
    JOIN stvterm ON (stvterm_code = sfr.sfrstcr_term_code)
    JOIN shrgrde grd ON (grd.shrgrde_code = ckg.shrtckg_grde_code_final)        
    WHERE 1=1
        AND ckg.shrtckg_gchg_code = 'GC' 
        AND stvterm_acyr_code = p_year
    ;    
    
        
    ------------------------------------
    -- Begin Procedure Declarations   --
    ------------------------------------

    -----------------------------------------------------------------------------
    -- Procedure: P_Print_Error                                                --
    -- Prints the record with the error message passed in as a parameter       --
    -----------------------------------------------------------------------------
    PROCEDURE P_PRINT_record (messageIn VARCHAR2, pidmIn NUMBER)
    IS
        ws_pline   VARCHAR2 (250);
        ws_id      VARCHAR2 (9);
        ws_name    VARCHAR2 (32);
        ws_run     VARCHAR2 (20);
        ws_ssn     VARCHAR2 (9);                               
    BEGIN
        IF ws_first_rec
        THEN
            SELECT TO_CHAR (SYSDATE, 'MM/DD/YYYY @ HH24:MI')
              INTO ws_run
              FROM dual;

            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                   'Run: '
                || ws_run
                || '                       TRRA; Fremont, OHIO');
            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                   'Program: PZ_CREATE_HEI_CU                    Errors found while generating HEI CU file          Year: '
                || v_year);
            UTL_FILE.PUT_LINE (ERROR_HANDLE, ' ');
            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                'SSN       Pi      Name                               Message'); 
            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                '--------- --------  --------------------------------   ------------------------------'); 
        END IF;

        ws_first_rec := FALSE;

        BEGIN
            SELECT spriden_id,
                   RPAD (
                       SUBSTR (
                              spriden_last_name
                           || ', '
                           || spriden_first_name
                           || ' '
                           || spriden_mi,
                           1,
                           32),
                       32,
                       ' '),
                   spbpers_ssn
              INTO ws_id, ws_name, ws_ssn
              FROM spriden, spbpers
             WHERE     spriden_pidm = pidmIn
                   AND spriden_change_ind IS NULL
                   AND spriden_pidm = spbpers_pidm;
        EXCEPTION
            WHEN OTHERS
            THEN
                ws_name := 'Error reading SPRIDEN for pidm= ' || pidmIn;
                ws_id := '????????';
        END;

        ws_pline :=
            ws_ssn || ' ' || pidmIn || '  ' || ws_name || '   ' || messageIn;

        UTL_FILE.PUT_LINE (ERROR_HANDLE, ws_pline);
    END P_PRINT_record;
    
        PROCEDURE P_Print_AC_courses (v_term              VARCHAR2,
                                      p_crn               NUMBER,
                                      p_pidm              NUMBER,
                                      p_quality_points    NUMBER,
                                      p_quality_points2   NUMBER,
                                      p_grde_code         VARCHAR2,
                                      p_grde_code2        VARCHAR2,
                                      p_gmod_code         VARCHAR2,
                                      p_rsts_code         VARCHAR2)
        IS
            v_rsts_desc   VARCHAR2 (30) := NULL;
            v_gmod_desc   VARCHAR2 (30) := NULL;
            v_cutoff      VARCHAR2 (24) := NULL;
    BEGIN
        IF ws_first_grade
        THEN
            UTL_FILE.PUT_LINE (ERROR_HANDLE, 'Cutoff Date: ' || v_cutoff);
            UTL_FILE.PUT_LINE (
                ERROR_HANDLE,
                'Term,CRN,PIDM,Points,Grade,GMOD Code,GMOD Desc,RSTS Code,RSTS Desc');
        END IF;

        ws_first_grade := FALSE;

        BEGIN
            SELECT STVGMOD_DESC
              INTO v_gmod_desc
              FROM stvgmod
             WHERE STVGMOD_CODE = p_gmod_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_gmod_desc := '?';
            WHEN OTHERS
            THEN
                v_gmod_desc := '!?';
        END;

        BEGIN
            SELECT STVRSTS_DESC
              INTO v_rsts_desc
              FROM stvrsts
             WHERE STVRSTS_CODE = p_rsts_code;
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_rsts_desc := '?';
            WHEN OTHERS
            THEN
                v_rsts_desc := '!?';
        END;

        UTL_FILE.PUT_LINE (
            ERROR_HANDLE,
               v_term
            || ','
            || p_crn
            || ','
            || p_pidm
            || ','
            || p_quality_points
            || ':'
            || p_quality_points2
            || ','
            || p_grde_code
            || ':'
            || p_grde_code2
            || ','
            || p_gmod_code
            || ','
            || v_gmod_desc
            || ','
            || p_rsts_code
            || ','
            || v_rsts_desc);
    END P_Print_AC_courses;



    -----------------------------------------------------------------------------
    -- --------------------------------------------
    -- Function: FZ_get_cutoff_date
    -- Get the data collection cutoff date
    -- --------------------------------------------
    FUNCTION FZ_get_cutoff_date (v_term VARCHAR2)
        RETURN varchar2
    AS
        v_cutoff_date   VARCHAR2 (24) := NULL;
    BEGIN
        BEGIN
            SELECT TO_CHAR (
                       NVL (SOBPTRM_CENSUS_2_DATE, SOBPTRM_END_DATE + 30),
                       'MM/DD/YYYY')
              INTO v_cutoff_date
              FROM sobptrm
             WHERE SOBPTRM_TERM_CODE = v_term AND SOBPTRM_PTRM_CODE = '1';
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_cutoff_date := TO_CHAR (TRUNC (SYSDATE), 'MM/DD/YYYY');
            WHEN OTHERS
            THEN
                v_cutoff_date := TO_CHAR (TRUNC (SYSDATE), 'MM/DD/YYYY');
        END;

        RETURN v_cutoff_date;
    END FZ_get_cutoff_date;


    -- --------------------------------------------
    -- Function: FZ_get_final_grade
    -- Get the student's Final Grade
    -- --------------------------------------------
    FUNCTION FZ_get_final_grade (v_term   varchar2,
                                 p_pidm   number,
                                 p_crn    varchar2)
        RETURN varchar2
    AS
        v_final_grade   varchar2 (10) := '?';
    BEGIN
        BEGIN
            SELECT a.shrtckg_grde_code_final
              INTO v_final_grade
              FROM shrtckn, shrtckg a, sobptrm
             WHERE     shrtckn_pidm = p_pidm
                   AND shrtckn_crn = p_crn
                   AND shrtckn_term_code = v_term
                   AND a.shrtckg_pidm = shrtckn_pidm
                   AND a.shrtckg_term_code = shrtckn_term_code
                   AND a.shrtckg_tckn_seq_no = shrtckn_seq_no
                   AND a.shrtckg_seq_no =
                       (SELECT MAX (b.shrtckg_seq_no)
                          FROM shrtckg b
                         WHERE     a.shrtckg_pidm = b.shrtckg_pidm
                               AND a.shrtckg_term_code = b.shrtckg_term_code
                               AND a.shrtckg_tckn_seq_no =
                                   b.shrtckg_tckn_seq_no)
                   AND sobptrm_term_code = v_term
                   AND sobptrm_ptrm_code = '1';


        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_final_grade := '?';
        END;

        RETURN v_final_grade;
    END FZ_get_final_grade;

    -- --------------------------------------------
    -- Function: FZ_get_quality_points
    -- Calculate the student's quality points
    -- --------------------------------------------
    FUNCTION fz_get_quality_points (p_grade VARCHAR2, p_level VARCHAR2, p_term VARCHAR2)
        RETURN NUMBER
    AS
        v_quality_points NUMBER (6, 3) := 0;
    BEGIN
        BEGIN
             SELECT shrgrde_quality_points
             INTO v_quality_points
             FROM shrgrde a
             WHERE shrgrde_code = p_grade 
                 AND shrgrde_levl_code = p_level 
                 AND shrgrde_term_code_effective = (
                                                        SELECT MAX(b.shrgrde_term_code_effective)
                                                        FROM shrgrde b 
                                                        WHERE b.shrgrde_code = a.shrgrde_code
                                                            AND b.shrgrde_levl_code = a.shrgrde_levl_code
                                                            AND b.shrgrde_term_code_effective <= p_term
                                                   );
        EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
                v_quality_points := 0;
        END;

        RETURN v_quality_points;
    END FZ_get_quality_points;
 

----------------------------------------------------------------------------
/**********************************************************************/
/***************              Main Program              ***************/
/**********************************************************************/
BEGIN
         
    EXECUTE IMMEDIATE ' truncate table sis_apps.hei_cu_output';
 
    v_year := p_year;
    
    OPEN cufile_rec (v_year);

    LOOP
        v_sfrstcr_crn := '';
        v_course_identifier := '';
        v_student_identifier := '';
        v_ssbsect_subj_code := '';
        v_ssbsect_crse_numb := '';
        v_ssbsect_seq_numb := '';
        v_shrtckg_credit_hours := 0;
        v_academic_attempt := '';
        v_real_rsts_code := '';
        v_sgbstdn_levl_code := 'UG';
        v_spriden_last_name := '';        
        v_course_grade := '';  
        v_course_outcome := '';
        v_term_code := '';
        v_shrtckg_term_code := '';
        v_year := '';

        FETCH cufile_rec
            INTO v_sfrstcr_pidm,
		         v_spriden_id,
		         v_sfrstcr_crn,
		         v_shrtckg_term_code,
		         v_year,
		         v_term_code,
		         v_student_identifier,
		         v_course_identifier,
		         v_ssbsect_seq_numb,
		         v_shrtckg_credit_hours, 
		         v_academic_attempt,
                 gmod_code,   
		         grde_code,	 
                 quality_points;

        EXIT WHEN cufile_rec%NOTFOUND;
        
    --v_debug_pidm := 85756;
    
    
        IF grde_code LIKE 'W%'
        THEN
            v_course_outcome := 'WITHD';
        END IF;

        IF grde_code = 'PR'
        THEN
            v_course_outcome := 'PROGR';
        END IF;        

        IF grde_code = 'AU'
        THEN
            v_course_outcome := 'AUDIT';
        END IF;

        IF NVL (grde_code, 'NG') = 'NG'
        THEN
            v_course_outcome := 'NGREP';
        END IF;
        
        IF grde_code = 'F'
        THEN
            v_course_outcome := 'GPAPT';
            v_course_grade := '00000';
            v_award_credit := 'N';
        END IF;
       
        IF v_course_outcome IS NULL
        THEN
            v_course_outcome := 'GPAPT'; 
        END IF;
        
        v_course_grade :=
           RPAD(LPAD(TO_CHAR(v_shrtckg_credit_hours * quality_points * 10), 4, 0), 5, 0);
           
        IF grde_code IN ('S', 'SC')
        THEN
            v_course_outcome := 'SATIS';
            v_course_grade := '     ';
        END IF;

        IF grde_code = 'U'
        THEN
            v_course_outcome := 'UNSAT';
            v_course_grade := '     ';
        END IF;
        
        IF grde_code = 'I'
        THEN
            v_course_outcome := 'INCOM';
            v_course_grade := '     ';
        END IF;
        
        IF grde_code = 'PR'
        THEN
            v_course_outcome := 'PROGR';
            v_course_grade := '     ';
        END IF; 
        
        IF v_course_grade IS NULL  -- should be 5 blank spaces if there is no grade
        THEN 
            v_course_grade := '     ';
        END IF;       


        SELECT NVL (MIN (1), 0)
              INTO v_dup_exists
              FROM DUAL
             WHERE v_spriden_last_name LIKE '%DUPLICATE%';

            IF v_dup_exists = 0
            THEN
                v_shrtgpa_hours_earned := 0;

                BEGIN
                    SELECT NVL (SUM (shrtgpa_hours_earned), 0)
                      INTO v_shrtgpa_hours_earned
                      FROM shrtgpa
                     WHERE     shrtgpa_pidm = v_sfrstcr_pidm
                           AND shrtgpa_term_code <= v_shrtckg_term_code
                           AND shrtgpa_levl_code = 'UG';
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_shrtgpa_hours_earned := 0;
                    WHEN OTHERS
                    THEN
                        p_print_record (
                            'Error while fetching shrtgpa_hours_earned ',
                            v_sfrstcr_pidm);
                END;

                BEGIN
                    SELECT NVL (SUM (shrtckg_credit_hours), 0)
                      INTO v_s_hours
                      FROM shrtckg a
                     WHERE     a.shrtckg_pidm = v_sfrstcr_pidm
                           AND a.shrtckg_term_code = v_shrtckg_term_code
                           AND a.shrtckg_seq_no =
                               (SELECT MAX (c.shrtckg_seq_no)
                                  FROM shrtckg c
                                 WHERE     c.shrtckg_pidm = v_sfrstcr_pidm
                                       AND c.shrtckg_term_code = v_shrtckg_term_code
                                       AND c.shrtckg_tckn_seq_no =
                                           a.shrtckg_tckn_seq_no)
                           AND a.shrtckg_grde_code_final = 'S'
                           AND v_sgbstdn_levl_code = 'UG';
                EXCEPTION
                    WHEN NO_DATA_FOUND
                    THEN
                        v_s_hours := '01';
                    WHEN OTHERS
                    THEN
                        p_print_record (
                            'Error while fetching shrtckg_credit_hours ',
                            v_sfrstcr_pidm);
                END;
                     

      v_ssbsect_subj_code := SUBSTR(v_course_identifier, 1, 3);
      v_ssbsect_crse_numb := SUBSTR(v_course_identifier, 4, 4); 
       
      grde_code         := FZ_get_final_grade(v_shrtckg_term_code, v_sfrstcr_pidm, v_sfrstcr_crn);     
      quality_points     := FZ_get_quality_points(grde_code, v_sgbstdn_levl_code, p_term);         
             
    -- --------------------------------------------------------------------------
    --      P_Print_AC_courses(v_term, v_sfrstcr_crn, v_sfrstcr_pidm,               --
    --                                    quality_points, quality_points2,       --
    --                                    grde_code, grde_code2, gmod_code,       --
    --                                    v_real_rsts_code);                       --
    --      grde_code         := grde_code2;                                       --
    --      quality_points     := quality_points2;                                   --
    -- --------------------------------------------------------------------------

      IF gmod_code = 'A' THEN
         v_academic_attempt := 'A';
      END IF;

      IF v_academic_attempt = 'I' THEN
          IF grde_code = 'P' THEN
              v_award_credit := 'Y';
          ELSE
              IF gmod_code = 'P' THEN -- Pass / Fail (Developmental Courses)
                  IF grde_code = 'S' THEN -- "S" Grade (Satisfactory)
                      v_award_credit := 'Y';
                  ELSE    
                      v_award_credit := 'N';
                  END IF;
              ELSE
                  IF quality_points > 0 THEN
                      v_award_credit := 'Y';
                  ELSE    -- check for Labs, Labs get credit from their corresponding lecture credit
                      BEGIN
                      SELECT NVL(shrgrde_quality_points,0) 
                    INTO lab_points
                    FROM sfrstcr, shrgrde
                    WHERE sfrstcr_pidm = v_sfrstcr_pidm
                    AND sfrstcr_term_code = v_shrtckg_term_code
                    AND sfrstcr_crn IN ( SELECT ssbsect_crn
                            FROM ssbsect
                         WHERE ssbsect_term_code = sfrstcr_term_code
                         AND ssbsect_subj_code = v_ssbsect_subj_code
                         AND ssbsect_crse_numb = SUBSTR(v_ssbsect_crse_numb,1,3))
                    AND shrgrde_code(+) = sfrstcr_grde_code
                    AND shrgrde_levl_code(+) = sfrstcr_levl_code;        
                    EXCEPTION
                        WHEN no_data_found THEN
                            lab_points := 0;
                        WHEN others THEN
                            lab_points := 0;
                    END;
                      IF lab_points > 0 THEN
                          v_award_credit := 'Y';
                      ELSE    
                          v_award_credit := 'N';
                      END IF;    
                  END IF;    
              END IF;
          END IF;                      
      ELSE
        v_award_credit := 'N';
      END IF;

    IF v_course_outcome = 'SATIS' THEN
      v_award_credit := 'Y';
    END IF; 
    
    IF v_course_outcome = 'UNSAT' THEN
      v_award_credit := 'N';
    END IF; 
    
      IF v_course_outcome = 'PROGR' THEN
      v_award_credit := 'Y';
    END IF; 
  
    IF v_course_outcome = 'GPAPT'
    THEN
        v_award_credit := 'Y';
    END IF; 
 
    
    INSERT INTO sis_apps.hei_cu_output
    (pidm, spriden_id, YEAR, term, campus, student_identifier, crn, course_identifier, section_identifier, shrtckg_term_code, credit_hours,
     attempt_credit, academic_award, course_outcome, course_grade, final_grade, date_added)
    VALUES
    (v_sfrstcr_pidm, v_spriden_id, v_year, v_term_code, 'TRRA', RPAD(v_student_identifier, 9, ' '), v_sfrstcr_crn, RPAD(v_course_identifier, 12, ' '), RPAD(v_ssbsect_seq_numb, 6, ' '),
     v_shrtckg_term_code, LPAD(TO_CHAR(v_shrtckg_credit_hours * 10), 3, '0'), v_academic_attempt, v_award_credit, RPAD(v_course_outcome, 5, ' '), v_course_grade, grde_code, SYSDATE);

    COMMIT;
    
            END IF;   --IF v_dup_exists=0 THEN
    
    END LOOP; 
        
    -- credit hours for these courses are being rounded up, so I'm hardcoding the correct value for now   
    UPDATE sis_apps.hei_cu_output
    SET credit_hours = 
            CASE WHEN course_identifier LIKE 'CIT1370%' 
                 THEN '015'
                 WHEN course_identifier LIKE 'AAD2620%' 
                 THEN '025'
                 WHEN course_identifier LIKE 'REF2501%' 
                 THEN '025'
                 WHEN course_identifier LIKE 'REF1351%' 
                 THEN '035'
                 WHEN course_identifier LIKE 'NUR2173%' 
                 THEN '005'
                 WHEN course_identifier LIKE 'NUR2073%' 
                 THEN '005'
                 WHEN course_identifier LIKE 'CIT1360%' 
                 THEN '015'
                 ELSE credit_hours
            END;
    COMMIT;
    
    UPDATE sis_apps.hei_cu_output
    SET ACADEMIC_AWARD = 
            CASE WHEN FINAL_GRADE = 'F'
                 THEN 'N'
                 ELSE ACADEMIC_AWARD
            END;
    COMMIT;
    

-----------------------------------------------------------------------------
  UTL_FILE_DIR := 'STU_OUT';
  FILE_HANDLE_CU := UTL_FILE.FOPEN(utl_file_dir,'CU_filedata.dat','w');    
  ERROR_HANDLE := UTL_FILE.FOPEN(utl_file_dir,'CU_errors.lis','w');    
-----------------------------------------------------------------------------
    
    SELECT COUNT(*) INTO v_totrec FROM sis_apps.hei_cu_output;
    
    UTL_FILE.PUT_LINE (FILE_HANDLE_CU,'TRRACU' || p_year || 'NA' || LPAD (v_totrec, 6, 0) ||CHR(13));

    FOR rec IN (
                SELECT campus,
                       YEAR,
                       term,
                       student_identifier,
                       course_identifier,
                       section_identifier,
                       credit_hours,
                       attempt_credit,
                       academic_award,
                       course_outcome,
                       course_grade
                FROM sis_apps.hei_cu_output
               )
    LOOP
    UTL_FILE.PUT_LINE(FILE_HANDLE_CU, rec.campus||rec.year||rec.term||rec.student_identifier||rec.course_identifier||rec.section_identifier||
                      rec.credit_hours||rec.attempt_credit||rec.academic_award||rec.course_outcome||rec.course_grade||CHR(13),TRUE); 
              
    END LOOP;  
 
    
  
  CLOSE cufile_rec;
  UTL_FILE.FCLOSE(FILE_HANDLE_CU);
  UTL_FILE.FCLOSE(ERROR_HANDLE);
  EXCEPTION
    WHEN no_param_exception THEN
    DBMS_OUTPUT.PUT_LINE('Program run terminated. No parameter values found.');

    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('Error Here before Program terminated.  PIDM: '||v_sfrstcr_pidm||'.  ' || SQLERRM(SQLCODE));
      DBMS_OUTPUT.PUT_LINE('Program Terminated.');
      UTL_FILE.FCLOSE_ALL;   
      
     
END PZ_CREATE_HEI_CU;


END ETL_HEI_REPORTING;
